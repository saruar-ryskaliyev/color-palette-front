function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var react = require('@emotion/react');
var react$1 = require('react');
var myImagePath = _interopDefault(require('./checker-pattern~bmpifnJb.png'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var trackHeight = 0.88;
var thumbDiameterSmall = 1.4;
var thumbDiameterBig = 1.6;

var Slider = function Slider(props) {
  var _useState = react$1.useState(false),
      sliderIsBeingTouched = _useState[0],
      setSliderIsBeingTouched = _useState[1];

  var _useState2 = react$1.useState(false),
      sliderThumbIsBeingTouched = _useState2[0],
      setSliderThumbIsBeingTouched = _useState2[1];

  var handleChange = function handleChange(event) {
    props.handleMoveSlider(parseInt(event.target.value));
    sliderIsBeingTouched && setSliderThumbIsBeingTouched(true);
  };

  var handleTouchStart = function handleTouchStart() {
    setSliderIsBeingTouched(true);
  };

  var handleTouchEnd = function handleTouchEnd() {
    setSliderIsBeingTouched(false);
    setSliderThumbIsBeingTouched(false);
  };

  var currentThumbDiameter;
  sliderThumbIsBeingTouched ? currentThumbDiameter = thumbDiameterBig : currentThumbDiameter = thumbDiameterSmall;
  var thumb = {
    boxSizing: 'border-box',
    border: 'none',
    width: currentThumbDiameter + "em",
    height: currentThumbDiameter + "em",
    borderRadius: '50%',
    borderStyle: 'solid',
    borderColor: '#faf6f6',
    borderWidth: '0.37em',
    boxShadow: "" + (props.disabled ? '0.1em 0.1em 0.3em 0 rgba(0, 0, 0, 0.25)' : '0.1em 0.1em 0.3em 0 rgba(0, 0, 0, 0.75)'),
    background: "" + (props.disabled ? '#ddd' : props.thumbBackground)
  };
  var track = {
    boxSizing: 'border-box',
    border: 'none',
    height: trackHeight + "em",
    borderRadius: trackHeight / 2 + "em",
    background: "" + (props.disabled ? '#ddd' : props.trackBackground)
  };
  var inputStyle = react.css({
    touchAction: 'none',
    WebkitAppearance: 'none',
    width: '100%',
    height: thumbDiameterBig + 0.65 + "em",
    margin: 0,
    padding: 0,
    font: '1em/1 arial, sans-serif',
    '&::-webkit-slider-runnable-track': track,
    '&::-moz-range-track': track,
    '&::-ms-track': track,
    '&::-webkit-slider-thumb': _extends({
      WebkitAppearance: 'none',
      marginTop: 0.5 * (trackHeight - currentThumbDiameter) + "em",
      '&:active': {
        marginTop: 0.5 * (trackHeight - thumbDiameterBig) + "em",
        width: thumbDiameterBig + "em",
        height: thumbDiameterBig + "em"
      },
      '@media (hover: hover)': {
        '&:hover': {
          marginTop: (!props.disabled && 0.5 * (trackHeight - thumbDiameterBig)) + "em",
          width: (!props.disabled && thumbDiameterBig) + "em",
          height: (!props.disabled && thumbDiameterBig) + "em"
        }
      }
    }, thumb),
    '&::-moz-range-thumb': thumb,
    '&::-ms-thumb': _extends({
      marginTop: 0
    }, thumb),
    '&::-ms-tooltip': {
      display: 'none'
    }
  });
  return react.jsx("input", {
    type: 'range',
    onChange: handleChange,
    onTouchEnd: handleTouchEnd,
    onTouchStart: handleTouchStart,
    css: inputStyle,
    value: props.value,
    disabled: props.disabled
  });
};

Slider.defaultProps = {
  disabled: false
};

var HueSlider = function HueSlider(props) {
  var handleMoveSlider = function handleMoveSlider(value) {
    props.handleChangeColor({
      h: value * 3.6,
      s: props.color.s,
      l: props.color.l,
      a: props.color.a
    });
  };

  return react.jsx(Slider, {
    disabled: props.disabled,
    thumbBackground: "hsl(" + props.color.h + ", 100%, 50%)",
    trackBackground: 'linear-gradient(to right, rgb(255, 0, 0),rgb(255, 255, 0),rgb(0, 255, 0),rgb(0, 255, 255),rgb(0, 0, 255),rgb(255, 0, 255),rgb(255, 0, 0))',
    value: props.color.h / 3.6,
    handleMoveSlider: handleMoveSlider
  });
};

var SaturationSlider = function SaturationSlider(props) {
  var handleMoveSlider = function handleMoveSlider(value) {
    props.handleChangeColor({
      h: props.color.h,
      s: value,
      l: props.color.l,
      a: props.color.a
    });
  };

  return react.jsx(Slider, {
    disabled: props.disabled,
    thumbBackground: "hsl(" + props.color.h + ", " + props.color.s + "%, 50%)",
    trackBackground: "linear-gradient(to right, hsl(" + props.color.h + ", 0%, 50%),  hsl(" + props.color.h + ", 100%, 50%))",
    value: props.color.s,
    handleMoveSlider: handleMoveSlider
  });
};

var LightnessSlider = function LightnessSlider(props) {
  var handleMoveSlider = function handleMoveSlider(value) {
    props.handleChangeColor({
      h: props.color.h,
      s: props.color.s,
      l: value,
      a: props.color.a
    });
  };

  return react.jsx(Slider, {
    disabled: props.disabled,
    thumbBackground: "hsl(" + props.color.h + ", 100%, " + props.color.l + "%)",
    trackBackground: "linear-gradient(to right, hsl(" + props.color.h + ", 100%, 0%),  hsl(" + props.color.h + ", 100%, 50%), hsl(" + props.color.h + ", 100%, 100%))",
    value: props.color.l,
    handleMoveSlider: handleMoveSlider
  });
};

var AlphaSlider = function AlphaSlider(props) {
  var handleMoveSlider = function handleMoveSlider(value) {
    props.handleChangeColor({
      h: props.color.h,
      s: props.color.s,
      l: props.color.l,
      a: value / 100
    });
  };

  return react.jsx(Slider, {
    disabled: props.disabled,
    thumbBackground: "linear-gradient(hsla(" + props.color.h + ", 100%, 50%, " + props.color.a + "),  hsla(" + props.color.h + ", 100%, 50%, " + props.color.a + ")), url(" + myImagePath + ")",
    trackBackground: "linear-gradient(to right, hsla(" + props.color.h + ", 100%, 50%, 0),  hsl(" + props.color.h + ", 100%, 50%)), url(" + myImagePath + ")",
    value: props.color.a * 100,
    handleMoveSlider: handleMoveSlider
  });
};

exports.AlphaSlider = AlphaSlider;
exports.HueSlider = HueSlider;
exports.LightnessSlider = LightnessSlider;
exports.SaturationSlider = SaturationSlider;
//# sourceMappingURL=index.js.map
