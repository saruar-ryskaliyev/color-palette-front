{"ast":null,"code":"import { ContinousBaseGesture } from './gesture';\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  let changePayload;\n  if (previous === undefined) {\n    changePayload = {\n      scaleChange: current.scale\n    };\n  } else {\n    changePayload = {\n      scaleChange: current.scale / previous.scale\n    };\n  }\n  return {\n    ...current,\n    ...changePayload\n  };\n}\nexport class PinchGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    this.handlerName = 'PinchGestureHandler';\n  }\n  onChange(callback) {\n    // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","scaleChange","scale","PinchGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/pinchGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type PinchGestureChangeEventPayload = {\n  scaleChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PinchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PinchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PinchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      scaleChange: current.scale,\n    };\n  } else {\n    changePayload = {\n      scaleChange: current.scale / previous.scale,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PinchGesture extends ContinousBaseGesture<\n  PinchGestureHandlerEventPayload,\n  PinchGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'PinchGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PinchGestureHandlerEventPayload & PinchGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PinchGestureType = InstanceType<typeof PinchGesture>;\n"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,WAArC;AAQA,SAASC,qBAATA,CACEC,OADF,EAEEC,QAFF,EAGE;EACA;;EACA,IAAIC,aAAJ;EACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1BD,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK;IADP,CAAhB;EAGD,CAJD,MAIO;IACLH,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK,KAAR,GAAgBJ,QAAQ,CAACI;IADxB,CAAhB;EAGD;EAED,OAAO;IAAE,GAAGL,OAAL;IAAc,GAAGE;EAAjB,CAAP;AACD;AAED,OAAO,MAAMI,YAAN,SAA2BR,oBAA3B,CAGL;EACAS,WAAWA,CAAA,EAAG;IACZ;IAEA,KAAKC,WAAL,GAAmB,qBAAnB;EACD;EAEDC,QAAQA,CACNC,QADM,EAMN;IACA;IACA,KAAKC,QAAL,CAAcZ,qBAAd,GAAsCA,qBAAtC;IACA,OAAO,MAAMU,QAAN,CAAeC,QAAf,CAAP;EACD;AAjBD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}