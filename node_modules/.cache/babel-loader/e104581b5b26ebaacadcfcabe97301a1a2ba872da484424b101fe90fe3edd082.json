{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { getNextHandlerTag } from '../handlersRegistry';\nimport { isRemoteDebuggingEnabled } from '../../utils';\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10\n}; // Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\n\nexport class Gesture {}\nlet nextGestureId = 0;\nexport class BaseGesture extends Gesture {\n  constructor() {\n    super(); // Used to check whether the gesture config has been updated when wrapping it\n    // with `useMemo`. Since every config will have a unique id, when the dependencies\n    // don't change, the config won't be recreated and the id will stay the same.\n    // If the id is different, it means that the config has changed and the gesture\n    // needs to be updated.\n\n    _defineProperty(this, \"gestureId\", -1);\n    _defineProperty(this, \"handlerTag\", -1);\n    _defineProperty(this, \"handlerName\", '');\n    _defineProperty(this, \"config\", {});\n    _defineProperty(this, \"handlers\", {\n      gestureId: -1,\n      handlerTag: -1,\n      isWorklet: []\n    });\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n  addDependency(key, gesture) {\n    const value = this.config[key];\n    this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n  }\n  withRef(ref) {\n    this.config.ref = ref;\n    return this;\n  } // eslint-disable-next-line @typescript-eslint/ban-types\n\n  isWorklet(callback) {\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n  onBegin(callback) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n  onStart(callback) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n  onEnd(callback) {\n    this.handlers.onEnd = callback; //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n  onFinalize(callback) {\n    this.handlers.onFinalize = callback; //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesDown(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesMove(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesUp(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesCancelled(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n    return this;\n  }\n  enabled(enabled) {\n    this.config.enabled = enabled;\n    return this;\n  }\n  shouldCancelWhenOutside(value) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n  hitSlop(hitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n  activeCursor(activeCursor) {\n    this.config.activeCursor = activeCursor;\n    return this;\n  }\n  mouseButton(mouseButton) {\n    this.config.mouseButton = mouseButton;\n    return this;\n  }\n  runOnJS(runOnJS) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n  simultaneousWithExternalGesture(...gestures) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n  requireExternalGestureToFail(...gestures) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n  blocksExternalGesture(...gestures) {\n    for (const gesture of gestures) {\n      this.addDependency('blocksHandlers', gesture);\n    }\n    return this;\n  }\n  withTestId(id) {\n    this.config.testId = id;\n    return this;\n  }\n  cancelsTouchesInView(value) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n    this.handlers = {\n      ...this.handlers,\n      handlerTag: this.handlerTag\n    };\n    if (this.config.ref) {\n      this.config.ref.current = this;\n    }\n  }\n  toGestureArray() {\n    return [this];\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n  prepare() {}\n  get shouldUseReanimated() {\n    // use Reanimated when runOnJS isn't set explicitly,\n    // and all defined callbacks are worklets,\n    // and remote debugging is disabled\n    return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !isRemoteDebuggingEnabled();\n  }\n}\nexport class ContinousBaseGesture extends BaseGesture {\n  onUpdate(callback) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n  onChange(callback) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n  manualActivation(manualActivation) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}","map":{"version":3,"names":["getNextHandlerTag","isRemoteDebuggingEnabled","CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","Gesture","nextGestureId","BaseGesture","constructor","_defineProperty","gestureId","handlerTag","isWorklet","handlers","addDependency","key","gesture","value","config","Array","concat","withRef","ref","callback","__workletHash","undefined","onBegin","onStart","onEnd","onFinalize","onTouchesDown","needsPointerData","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","activeCursor","mouseButton","runOnJS","simultaneousWithExternalGesture","gestures","requireExternalGestureToFail","blocksExternalGesture","withTestId","id","testId","cancelsTouchesInView","initialize","current","toGestureArray","prepare","shouldUseReanimated","includes","ContinousBaseGesture","onUpdate","onChange","manualActivation"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gesture.ts"],"sourcesContent":["import { FlingGestureHandlerEventPayload } from '../FlingGestureHandler';\nimport { ForceTouchGestureHandlerEventPayload } from '../ForceTouchGestureHandler';\nimport {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n  ActiveCursor,\n  MouseButton,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../handlersRegistry';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { LongPressGestureHandlerEventPayload } from '../LongPressGestureHandler';\nimport { PanGestureHandlerEventPayload } from '../PanGestureHandler';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { TapGestureHandlerEventPayload } from '../TapGestureHandler';\nimport { NativeViewGestureHandlerPayload } from '../NativeViewGestureHandler';\nimport { isRemoteDebuggingEnabled } from '../../utils';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  blocksHandlers?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n  runOnJS?: boolean;\n  testId?: string;\n  cancelsTouchesInView?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  gestureId: number;\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = typeof CALLBACK_TYPE[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nlet nextGestureId = 0;\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>\n> extends Gesture {\n  private gestureId = -1;\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    gestureId: -1,\n    handlerTag: -1,\n    isWorklet: [],\n  };\n\n  constructor() {\n    super();\n\n    // Used to check whether the gesture config has been updated when wrapping it\n    // with `useMemo`. Since every config will have a unique id, when the dependencies\n    // don't change, the config won't be recreated and the id will stay the same.\n    // If the id is different, it means that the config has changed and the gesture\n    // needs to be updated.\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail' | 'blocksHandlers',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  activeCursor(activeCursor: ActiveCursor) {\n    this.config.activeCursor = activeCursor;\n    return this;\n  }\n\n  mouseButton(mouseButton: MouseButton) {\n    this.config.mouseButton = mouseButton;\n    return this;\n  }\n\n  runOnJS(runOnJS: boolean) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  blocksExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('blocksHandlers', gesture);\n    }\n    return this;\n  }\n\n  withTestId(id: string) {\n    this.config.testId = id;\n    return this;\n  }\n\n  cancelsTouchesInView(value: boolean) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n\n  get shouldUseReanimated(): boolean {\n    // use Reanimated when runOnJS isn't set explicitly,\n    // and all defined callbacks are worklets,\n    // and remote debugging is disabled\n    return (\n      this.config.runOnJS !== true &&\n      !this.handlers.isWorklet.includes(false) &&\n      !isRemoteDebuggingEnabled()\n    );\n  }\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>\n> extends BaseGesture<EventPayloadT> {\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}