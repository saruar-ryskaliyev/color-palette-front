{"ast":null,"code":"'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { isSharedValue } from '../reanimated2';\nimport { isChromeDebugger } from '../reanimated2/PlatformChecker';\nimport WorkletEventHandler from '../reanimated2/WorkletEventHandler';\nimport { initialUpdaterRun } from '../reanimated2/animation';\nimport { hasInlineStyles, getInlineStyle } from './InlinePropManager';\nimport { flattenArray, has } from './utils';\nimport { StyleSheet } from 'react-native';\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\nexport class PropsFilter {\n  constructor() {\n    _defineProperty(this, \"_initialStyle\", {});\n  }\n  filterNonAnimatedProps(component) {\n    const inputProps = component.props;\n    const props = {};\n    for (const key in inputProps) {\n      const value = inputProps[key];\n      if (key === 'style') {\n        const styleProp = inputProps.style;\n        const styles = flattenArray(styleProp ?? []);\n        const processedStyle = styles.map(style => {\n          if (style && style.viewDescriptors) {\n            var _style$viewsRef;\n            // this is how we recognize styles returned by useAnimatedStyle\n            (_style$viewsRef = style.viewsRef) === null || _style$viewsRef === void 0 ? void 0 : _style$viewsRef.add(component);\n            if (component._isFirstRender) {\n              this._initialStyle = {\n                ...style.initial.value,\n                ...this._initialStyle,\n                ...initialUpdaterRun(style.initial.updater)\n              };\n            }\n            return this._initialStyle;\n          } else if (hasInlineStyles(style)) {\n            return getInlineStyle(style, component._isFirstRender);\n          } else {\n            return style;\n          }\n        });\n        props[key] = StyleSheet.flatten(processedStyle);\n      } else if (key === 'animatedProps') {\n        const animatedProp = inputProps.animatedProps;\n        if (animatedProp.initial !== undefined) {\n          Object.keys(animatedProp.initial.value).forEach(initialValueKey => {\n            var _animatedProp$initial, _animatedProp$viewsRe;\n            props[initialValueKey] = (_animatedProp$initial = animatedProp.initial) === null || _animatedProp$initial === void 0 ? void 0 : _animatedProp$initial.value[initialValueKey];\n            (_animatedProp$viewsRe = animatedProp.viewsRef) === null || _animatedProp$viewsRe === void 0 ? void 0 : _animatedProp$viewsRe.add(component);\n          });\n        }\n      } else if (has('workletEventHandler', value) && value.workletEventHandler instanceof WorkletEventHandler) {\n        if (value.workletEventHandler.eventNames.length > 0) {\n          value.workletEventHandler.eventNames.forEach(eventName => {\n            props[eventName] = has('listeners', value.workletEventHandler) ? value.workletEventHandler.listeners[eventName] : dummyListener;\n          });\n        } else {\n          props[key] = dummyListener;\n        }\n      } else if (isSharedValue(value)) {\n        if (component._isFirstRender) {\n          props[key] = value.value;\n        }\n      } else if (key !== 'onGestureHandlerStateChange' || !isChromeDebugger()) {\n        props[key] = value;\n      }\n    }\n    return props;\n  }\n}","map":{"version":3,"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","isSharedValue","isChromeDebugger","WorkletEventHandler","initialUpdaterRun","hasInlineStyles","getInlineStyle","flattenArray","has","StyleSheet","dummyListener","PropsFilter","constructor","filterNonAnimatedProps","component","inputProps","props","styleProp","style","styles","processedStyle","map","viewDescriptors","_style$viewsRef","viewsRef","add","_isFirstRender","_initialStyle","initial","updater","flatten","animatedProp","animatedProps","keys","forEach","initialValueKey","_animatedProp$initial","_animatedProp$viewsRe","workletEventHandler","eventNames","length","eventName","listeners"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-reanimated/lib/module/createAnimatedComponent/PropsFilter.tsx"],"sourcesContent":["'use strict';\nimport type { StyleProps } from '../reanimated2';\nimport { isSharedValue } from '../reanimated2';\nimport { isChromeDebugger } from '../reanimated2/PlatformChecker';\nimport WorkletEventHandler from '../reanimated2/WorkletEventHandler';\nimport { initialUpdaterRun } from '../reanimated2/animation';\nimport { hasInlineStyles, getInlineStyle } from './InlinePropManager';\nimport type {\n  AnimatedComponentProps,\n  AnimatedProps,\n  InitialComponentProps,\n  IAnimatedComponentInternal,\n  IPropsFilter,\n} from './commonTypes';\nimport { flattenArray, has } from './utils';\nimport { StyleSheet } from 'react-native';\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nexport class PropsFilter implements IPropsFilter {\n  private _initialStyle = {};\n\n  public filterNonAnimatedProps(\n    component: React.Component<unknown, unknown> & IAnimatedComponentInternal\n  ): Record<string, unknown> {\n    const inputProps =\n      component.props as AnimatedComponentProps<InitialComponentProps>;\n    const props: Record<string, unknown> = {};\n    for (const key in inputProps) {\n      const value = inputProps[key];\n      if (key === 'style') {\n        const styleProp = inputProps.style;\n        const styles = flattenArray<StyleProps>(styleProp ?? []);\n        const processedStyle: StyleProps = styles.map((style) => {\n          if (style && style.viewDescriptors) {\n            // this is how we recognize styles returned by useAnimatedStyle\n            style.viewsRef?.add(component);\n            if (component._isFirstRender) {\n              this._initialStyle = {\n                ...style.initial.value,\n                ...this._initialStyle,\n                ...initialUpdaterRun<StyleProps>(style.initial.updater),\n              };\n            }\n            return this._initialStyle;\n          } else if (hasInlineStyles(style)) {\n            return getInlineStyle(style, component._isFirstRender);\n          } else {\n            return style;\n          }\n        });\n        props[key] = StyleSheet.flatten(processedStyle);\n      } else if (key === 'animatedProps') {\n        const animatedProp = inputProps.animatedProps as Partial<\n          AnimatedComponentProps<AnimatedProps>\n        >;\n        if (animatedProp.initial !== undefined) {\n          Object.keys(animatedProp.initial.value).forEach((initialValueKey) => {\n            props[initialValueKey] =\n              animatedProp.initial?.value[initialValueKey];\n            animatedProp.viewsRef?.add(component);\n          });\n        }\n      } else if (\n        has('workletEventHandler', value) &&\n        value.workletEventHandler instanceof WorkletEventHandler\n      ) {\n        if (value.workletEventHandler.eventNames.length > 0) {\n          value.workletEventHandler.eventNames.forEach((eventName) => {\n            props[eventName] = has('listeners', value.workletEventHandler)\n              ? (\n                  value.workletEventHandler.listeners as Record<string, unknown>\n                )[eventName]\n              : dummyListener;\n          });\n        } else {\n          props[key] = dummyListener;\n        }\n      } else if (isSharedValue(value)) {\n        if (component._isFirstRender) {\n          props[key] = value.value;\n        }\n      } else if (key !== 'onGestureHandlerStateChange' || !isChromeDebugger()) {\n        props[key] = value;\n      }\n    }\n    return props;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}