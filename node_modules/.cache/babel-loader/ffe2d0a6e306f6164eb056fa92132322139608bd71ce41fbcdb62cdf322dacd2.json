{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/CreatePalette.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { ChromePicker, TwitterPicker } from 'react-color';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreatePalette() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    paletteName\n  } = useParams(); // Retrieve the palette name from the URL\n  const [colors, setColors] = useState([]);\n  const [currentColor, setCurrentColor] = useState('#fff');\n  const [myColors, setMyColors] = useState([]);\n  const [name, setName] = useState('');\n  useEffect(() => {\n    const loadedColors = JSON.parse(localStorage.getItem('colors')) || [];\n    setMyColors(loadedColors.map(colorObj => colorObj.hex));\n\n    // Load existing palette if editing\n    if (paletteName) {\n      const existingPalette = JSON.parse(localStorage.getItem(`palette-${paletteName}`));\n      if (existingPalette) {\n        setColors(existingPalette.colors);\n        setName(existingPalette.name);\n      }\n    }\n  }, [paletteName]);\n  const handleColorChange = color => {\n    setCurrentColor(color.hex);\n  };\n  const addNewColor = () => {\n    if (!colors.includes(currentColor)) {\n      setColors([...colors, currentColor]);\n    }\n  };\n  const deleteColor = index => {\n    const newColors = [...colors];\n    newColors.splice(index, 1);\n    setColors(newColors);\n  };\n  const goBack = () => {\n    navigate('/my-palettes');\n  };\n  const savePalette = () => {\n    const newPalette = {\n      name: name,\n      colors: colors\n    };\n    const paletteString = JSON.stringify(newPalette);\n    localStorage.setItem(`palette-${newPalette.name}`, paletteString);\n    navigate('/my-palettes');\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: goBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Palette Name\",\n          value: name,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: addNewColor,\n          children: \"Add Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: savePalette,\n          children: \"Save Palette\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ColorPickerContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Color Picker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChromePicker, {\n        color: currentColor,\n        onChangeComplete: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"My Colors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TwitterPicker, {\n        colors: myColors,\n        color: currentColor,\n        onChangeComplete: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ColorGrid, {\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(ColorSwatch, {\n        color: color,\n        children: [color.toUpperCase(), /*#__PURE__*/_jsxDEV(DeleteButton, {\n          onClick: () => deleteColor(index),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(CreatePalette, \"7CfojKBGplGlGIFDe72N5UWhTzs=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = CreatePalette;\nvar _c;\n$RefreshReg$(_c, \"CreatePalette\");","map":{"version":3,"names":["React","useState","useEffect","styled","useNavigate","ChromePicker","TwitterPicker","useParams","jsxDEV","_jsxDEV","CreatePalette","_s","navigate","paletteName","colors","setColors","currentColor","setCurrentColor","myColors","setMyColors","name","setName","loadedColors","JSON","parse","localStorage","getItem","map","colorObj","hex","existingPalette","handleColorChange","color","addNewColor","includes","deleteColor","index","newColors","splice","goBack","savePalette","newPalette","paletteString","stringify","setItem","Container","children","Header","Button","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Input","placeholder","value","onChange","e","target","ColorPickerContainer","onChangeComplete","ColorGrid","ColorSwatch","toUpperCase","DeleteButton","_c","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/CreatePalette.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { ChromePicker, TwitterPicker } from 'react-color';\nimport { useParams } from 'react-router-dom';\n\nexport default function CreatePalette() {\n    const navigate = useNavigate();\n    const { paletteName } = useParams(); // Retrieve the palette name from the URL\n    const [colors, setColors] = useState([]);\n    const [currentColor, setCurrentColor] = useState('#fff');\n    const [myColors, setMyColors] = useState([]);\n    const [name, setName] = useState('');\n\n    useEffect(() => {\n        const loadedColors = JSON.parse(localStorage.getItem('colors')) || [];\n        setMyColors(loadedColors.map(colorObj => colorObj.hex));\n\n        // Load existing palette if editing\n        if (paletteName) {\n            const existingPalette = JSON.parse(localStorage.getItem(`palette-${paletteName}`));\n            if (existingPalette) {\n                setColors(existingPalette.colors);\n                setName(existingPalette.name);\n            }\n        }\n    }, [paletteName]);\n\n    const handleColorChange = color => {\n        setCurrentColor(color.hex);\n    };\n\n    const addNewColor = () => {\n        if (!colors.includes(currentColor)) {\n            setColors([...colors, currentColor]);\n        }\n    };\n\n    const deleteColor = index => {\n        const newColors = [...colors];\n        newColors.splice(index, 1);\n        setColors(newColors);\n    };\n\n    const goBack = () => {\n        navigate('/my-palettes');\n    };\n\n    const savePalette = () => {\n        const newPalette = {\n            name: name,\n            colors: colors\n        };\n    \n        const paletteString = JSON.stringify(newPalette);\n        localStorage.setItem(`palette-${newPalette.name}`, paletteString);\n        navigate('/my-palettes');\n    };\n\n    return (\n        <Container>\n            <Header>\n                <Button onClick={goBack}>Back</Button>\n                <div>\n                    <Input\n                        placeholder=\"Palette Name\"\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                    />\n                    <Button onClick={addNewColor}>Add Color</Button>\n                    <Button onClick={savePalette}>Save Palette</Button>\n                </div>\n            </Header>\n            <ColorPickerContainer>\n                <h3>Color Picker</h3>\n                <ChromePicker color={currentColor} onChangeComplete={handleColorChange} />\n                <h3>My Colors</h3>\n                <TwitterPicker\n                    colors={myColors}\n                    color={currentColor}\n                    onChangeComplete={handleColorChange}\n                />\n            </ColorPickerContainer>\n            <ColorGrid>\n                {colors.map((color, index) => (\n                    <ColorSwatch key={index} color={color}>\n                        {color.toUpperCase()}\n                        <DeleteButton onClick={() => deleteColor(index)}>&times;</DeleteButton>\n                    </ColorSwatch>\n                ))}\n            </ColorGrid>\n        </Container>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}