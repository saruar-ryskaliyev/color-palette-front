{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/EditMyColors.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { ChromePicker } from 'react-color';\nimport { ReactComponent as IconClose } from \"./icon-close.svg\";\nimport \"./EditMyColors.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditMyColors = ({\n  isOpen,\n  onClose,\n  initialColor\n}) => {\n  _s();\n  const [currentColor, setCurrentColor] = useState(initialColor);\n  const [tempColor, setTempColor] = useState(initialColor); // Temporarily hold color changes\n\n  console.log(existingColors);\n\n  // Update currentColor when initialColor changes\n  useEffect(() => {\n    setCurrentColor(initialColor);\n    setTempColor(initialColor); // Reset temp color on initial color change\n  }, [initialColor]);\n  const handleColorChange = useCallback(color => {\n    setTempColor(color.hex); // Store color changes temporarily\n  }, []);\n  const handleSaveColor = () => {\n    // Check for color existence in localStorage\n    let existingColors = JSON.parse(localStorage.getItem('colors')) || [];\n    if (existingColors.includes(tempColor)) {\n      alert(\"This color already exists.\");\n    } else {\n      existingColors.push(tempColor);\n      localStorage.setItem('colors', JSON.stringify(existingColors));\n      setCurrentColor(tempColor); // Update the current color with the new selection\n      onClose(); // Close the modal after saving\n    }\n  };\n  const handleCancel = () => {\n    setTempColor(currentColor); // Revert any unsaved changes\n    onClose(); // Close the modal\n  };\n  const onWrapperClick = event => {\n    if (event.target.classList.contains(\"modal-wrapper\")) onClose();\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-wrapper\",\n    onClick: onWrapperClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      style: {\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modal-close-button\",\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(IconClose, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChromePicker, {\n        color: tempColor,\n        onChangeComplete: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveColor,\n          style: {\n            marginRight: '10px'\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(EditMyColors, \"OzpngxFeCLVGDR28eY7hOumXObo=\");\n_c = EditMyColors;\nvar _c;\n$RefreshReg$(_c, \"EditMyColors\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChromePicker","ReactComponent","IconClose","jsxDEV","_jsxDEV","EditMyColors","isOpen","onClose","initialColor","_s","currentColor","setCurrentColor","tempColor","setTempColor","console","log","existingColors","handleColorChange","color","hex","handleSaveColor","JSON","parse","localStorage","getItem","includes","alert","push","setItem","stringify","handleCancel","onWrapperClick","event","target","classList","contains","className","onClick","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onChangeComplete","marginRight","_c","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/EditMyColors.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { ChromePicker } from 'react-color';\nimport { ReactComponent as IconClose } from \"./icon-close.svg\";\nimport \"./EditMyColors.css\";\n\nexport const EditMyColors = ({ isOpen, onClose, initialColor }) => {\n  const [currentColor, setCurrentColor] = useState(initialColor);\n  const [tempColor, setTempColor] = useState(initialColor); // Temporarily hold color changes\n\n  console.log(existingColors);\n\n\n  // Update currentColor when initialColor changes\n  useEffect(() => {\n    setCurrentColor(initialColor);\n    setTempColor(initialColor); // Reset temp color on initial color change\n  }, [initialColor]);\n\n  const handleColorChange = useCallback((color) => {\n    setTempColor(color.hex); // Store color changes temporarily\n  }, []);\n\n  const handleSaveColor = () => {\n    // Check for color existence in localStorage\n    let existingColors = JSON.parse(localStorage.getItem('colors')) || [];\n\n    if (existingColors.includes(tempColor)) {\n      alert(\"This color already exists.\");\n    } else {\n      existingColors.push(tempColor);\n      localStorage.setItem('colors', JSON.stringify(existingColors));\n      setCurrentColor(tempColor); // Update the current color with the new selection\n      onClose(); // Close the modal after saving\n    }\n  };\n\n  const handleCancel = () => {\n    setTempColor(currentColor); // Revert any unsaved changes\n    onClose(); // Close the modal\n  };\n\n  const onWrapperClick = (event) => {\n    if (event.target.classList.contains(\"modal-wrapper\")) onClose();\n  }\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-wrapper\" onClick={onWrapperClick}>\n      <div className=\"modal-content\" style={{ textAlign: 'center' }}>\n        <button className=\"modal-close-button\" onClick={onClose}>\n          <IconClose />\n        </button>\n        <ChromePicker\n          color={tempColor}\n          onChangeComplete={handleColorChange}\n        />\n        <div>\n          <button onClick={handleSaveColor} style={{ marginRight: '10px' }}>Save</button>\n          <button onClick={handleCancel}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}