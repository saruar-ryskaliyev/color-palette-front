{"ast":null,"code":"import { Platform } from 'react-native';\nlet useNewWebImplementation = true;\nlet getWasCalled = false;\nexport function enableExperimentalWebImplementation(_shouldEnable = true) {// NO-OP since the new implementation is now the default\n}\nexport function enableLegacyWebImplementation(shouldUseLegacyImplementation = true) {\n  if (Platform.OS !== 'web' || useNewWebImplementation === !shouldUseLegacyImplementation) {\n    return;\n  }\n  if (getWasCalled) {\n    console.error('Some parts of this application have already started using the new gesture handler implementation. No changes will be applied. You can try enabling legacy implementation earlier.');\n    return;\n  }\n  useNewWebImplementation = !shouldUseLegacyImplementation;\n}\nexport function isNewWebImplementationEnabled() {\n  getWasCalled = true;\n  return useNewWebImplementation;\n}","map":{"version":3,"names":["Platform","useNewWebImplementation","getWasCalled","enableExperimentalWebImplementation","_shouldEnable","enableLegacyWebImplementation","shouldUseLegacyImplementation","OS","console","error","isNewWebImplementationEnabled"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/EnableNewWebImplementation.ts"],"sourcesContent":["import { Platform } from 'react-native';\n\nlet useNewWebImplementation = true;\nlet getWasCalled = false;\n\nexport function enableExperimentalWebImplementation(\n  _shouldEnable = true\n): void {\n  // NO-OP since the new implementation is now the default\n}\n\nexport function enableLegacyWebImplementation(\n  shouldUseLegacyImplementation = true\n): void {\n  if (\n    Platform.OS !== 'web' ||\n    useNewWebImplementation === !shouldUseLegacyImplementation\n  ) {\n    return;\n  }\n\n  if (getWasCalled) {\n    console.error(\n      'Some parts of this application have already started using the new gesture handler implementation. No changes will be applied. You can try enabling legacy implementation earlier.'\n    );\n    return;\n  }\n\n  useNewWebImplementation = !shouldUseLegacyImplementation;\n}\n\nexport function isNewWebImplementationEnabled(): boolean {\n  getWasCalled = true;\n  return useNewWebImplementation;\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AAEA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,YAAY,GAAG,KAAnB;AAEA,OAAO,SAASC,mCAATA,CACLC,aAAa,GAAG,IADX,EAEC,CACN;AAAA;AAGF,OAAO,SAASC,6BAATA,CACLC,6BAA6B,GAAG,IAD3B,EAEC;EACN,IACEN,QAAQ,CAACO,EAAT,KAAgB,KAAhB,IACAN,uBAAuB,KAAK,CAACK,6BAF/B,EAGE;IACA;EACD;EAED,IAAIJ,YAAJ,EAAkB;IAChBM,OAAO,CAACC,KAAR,CACE,mLADF;IAGA;EACD;EAEDR,uBAAuB,GAAG,CAACK,6BAA3B;AACD;AAED,OAAO,SAASI,6BAATA,CAAA,EAAkD;EACvDR,YAAY,GAAG,IAAf;EACA,OAAOD,uBAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}