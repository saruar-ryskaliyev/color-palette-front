{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction rgbaToHex(r, g, b, a) {\n  // If alpha is 1, no need to convert it to hex\n  if (a === 1) {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();\n  } else {\n    // Convert alpha from [0,1] to [0,255] then to hex\n    let alphaHex = Math.round(a * 255).toString(16);\n    if (alphaHex.length === 1) {\n      alphaHex = \"0\" + alphaHex;\n    }\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase() + alphaHex;\n  }\n}\nfunction MyColors() {\n  _s();\n  // Read colors from local storage\n  const [colors, setColors] = useState(() => {\n    const storedColors = localStorage.getItem('colors');\n    return storedColors ? JSON.parse(storedColors) : [];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Colors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center'\n      },\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100px',\n            height: '100px',\n            backgroundColor: color.hex,\n            marginBottom: '5px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: color.hex.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(MyColors, \"xk8W2B5j0DT73PBIJlExKXkj1+8=\");\n_c = MyColors;\nexport default MyColors;\nvar _c;\n$RefreshReg$(_c, \"MyColors\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","rgbaToHex","r","g","b","a","toString","slice","toUpperCase","alphaHex","Math","round","length","MyColors","_s","colors","setColors","storedColors","localStorage","getItem","JSON","parse","style","display","flexDirection","alignItems","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","flexWrap","justifyContent","map","color","index","margin","width","height","backgroundColor","hex","marginBottom","textAlign","_c","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction rgbaToHex(r, g, b, a) {\n    // If alpha is 1, no need to convert it to hex\n    if (a === 1) {\n      return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();\n    } else {\n      // Convert alpha from [0,1] to [0,255] then to hex\n      let alphaHex = Math.round(a * 255).toString(16);\n      if (alphaHex.length === 1) {\n        alphaHex = \"0\" + alphaHex;\n      }\n      return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase() + alphaHex;\n    }\n  }\n  \n\n\nfunction MyColors() {\n    // Read colors from local storage\n    const [colors, setColors] = useState(() => {\n      const storedColors = localStorage.getItem('colors');\n      return storedColors ? JSON.parse(storedColors) : [];\n    });\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '20px' }}>\n            <h1>My Colors</h1>\n            <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\n                {colors.map((color, index) => (\n                    <div key={index} style={{ margin: '10px' }}>\n                        <div style={{\n                            width: '100px',\n                            height: '100px',\n                            backgroundColor: color.hex,\n                            marginBottom: '5px'\n                        }}></div>\n                        <div style={{ textAlign: 'center' }}>{color.hex.toUpperCase()}</div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MyColors;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}