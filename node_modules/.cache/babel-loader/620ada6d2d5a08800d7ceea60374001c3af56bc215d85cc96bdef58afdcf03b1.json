{"ast":null,"code":"import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { ComposedGesture, ExclusiveGesture, SimultaneousGesture } from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\nimport { HoverGesture } from './hoverGesture';\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n  Pan: () => {\n    return new PanGesture();\n  },\n  Pinch: () => {\n    return new PinchGesture();\n  },\n  Rotation: () => {\n    return new RotationGesture();\n  },\n  Fling: () => {\n    return new FlingGesture();\n  },\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n  Native: () => {\n    return new NativeGesture();\n  },\n  Manual: () => {\n    return new ManualGesture();\n  },\n  Hover: () => {\n    return new HoverGesture();\n  },\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures) => {\n    return new ComposedGesture(...gestures);\n  },\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures) {\n    return new SimultaneousGesture(...gestures);\n  },\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures) {\n    return new ExclusiveGesture(...gestures);\n  }\n};","map":{"version":3,"names":["FlingGesture","ForceTouchGesture","ComposedGesture","ExclusiveGesture","SimultaneousGesture","LongPressGesture","PanGesture","PinchGesture","RotationGesture","TapGesture","NativeGesture","ManualGesture","HoverGesture","GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Hover","Race","gestures","Simultaneous","Exclusive"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureObjects.ts"],"sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\nimport { HoverGesture } from './hoverGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  Hover: () => {\n    return new HoverGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SACEC,eADF,EAEEC,gBAFF,EAGEC,mBAHF,QAIO,sBAJP;AAKA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,cAAc,GAAG;EAC5BC,GAAG,EAAEA,CAAA,KAAM;IACT,OAAO,IAAIL,UAAJ,EAAP;EACD,CAH2B;EAK5BM,GAAG,EAAEA,CAAA,KAAM;IACT,OAAO,IAAIT,UAAJ,EAAP;EACD,CAP2B;EAS5BU,KAAK,EAAEA,CAAA,KAAM;IACX,OAAO,IAAIT,YAAJ,EAAP;EACD,CAX2B;EAa5BU,QAAQ,EAAEA,CAAA,KAAM;IACd,OAAO,IAAIT,eAAJ,EAAP;EACD,CAf2B;EAiB5BU,KAAK,EAAEA,CAAA,KAAM;IACX,OAAO,IAAIlB,YAAJ,EAAP;EACD,CAnB2B;EAqB5BmB,SAAS,EAAEA,CAAA,KAAM;IACf,OAAO,IAAId,gBAAJ,EAAP;EACD,CAvB2B;EAyB5Be,UAAU,EAAEA,CAAA,KAAM;IAChB,OAAO,IAAInB,iBAAJ,EAAP;EACD,CA3B2B;EA6B5BoB,MAAM,EAAEA,CAAA,KAAM;IACZ,OAAO,IAAIX,aAAJ,EAAP;EACD,CA/B2B;EAiC5BY,MAAM,EAAEA,CAAA,KAAM;IACZ,OAAO,IAAIX,aAAJ,EAAP;EACD,CAnC2B;EAqC5BY,KAAK,EAAEA,CAAA,KAAM;IACX,OAAO,IAAIX,YAAJ,EAAP;EACD,CAvC2B;EAyC5B;AACF;AACA;AACA;EACEY,IAAI,EAAEA,CAAC,GAAGC,QAAJ,KAA4B;IAChC,OAAO,IAAIvB,eAAJ,CAAoB,GAAGuB,QAAvB,CAAP;EACD,CA/C2B;EAiD5B;AACF;AACA;EACEC,YAAYA,CAAC,GAAGD,QAAJ,EAAyB;IACnC,OAAO,IAAIrB,mBAAJ,CAAwB,GAAGqB,QAA3B,CAAP;EACD,CAtD2B;EAwD5B;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,SAASA,CAAC,GAAGF,QAAJ,EAAyB;IAChC,OAAO,IAAItB,gBAAJ,CAAqB,GAAGsB,QAAxB,CAAP;EACD;AAjE2B,CAAvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}