{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/CreatePalette.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { ChromePicker, TwitterPicker } from 'react-color';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n`;\n_c = Container;\nconst Header = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin-bottom: 20px;\n`;\n_c2 = Header;\nconst ColorGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    gap: 10px;\n    width: 100%;\n`;\n_c3 = ColorGrid;\nconst ColorSwatch = styled.div`\n    height: 150px;\n    background-color: ${props => props.color};\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    color: #fff;\n    font-weight: bold;\n    padding: 10px;\n`;\n_c4 = ColorSwatch;\nconst Dropdown = styled.select`\n  padding: 5px;\n  margin-right: 10px;\n`;\nconst Button = styled.button`\n  padding: 10px 20px;\n  margin: 0 5px;\n`;\n_c5 = Button;\nconst ColorPickerContainer = styled.div`\n  margin: 20px 0;\n`;\n_c6 = ColorPickerContainer;\nconst MyColorsList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 10px;\n`;\nconst MyColorSwatch = styled.div`\n  width: 50px;\n  height: 50px;\n  background-color: ${props => props.color};\n  border-radius: 5px;\n  cursor: pointer;\n`;\nexport default function CreatePalette() {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const loadedColorObjects = JSON.parse(localStorage.getItem('colors')) || [];\n    // Ensure the name used here for the array of strings is the same as the one used to set the state\n    const loadedColorStrings = loadedColorObjects.map(colorObj => colorObj.hex);\n    setMyColors(loadedColorStrings);\n  }, []);\n  const [colorFormat, setColorFormat] = useState('hex');\n  const [colors, setColors] = useState(['#1ABC9C', '#16A085', '#9B59B6', '#E74C3C', '#2C3E50']);\n  const [currentColor, setCurrentColor] = useState('#fff'); // State to track the current color from the picker\n  const [myColors, setMyColors] = useState([]);\n  const addNewColor = color => {\n    setColors([...colors, color]);\n    const newColorsArray = [...myColors, color]; // Add new color string to array\n    localStorage.setItem('colors', JSON.stringify(newColorsArray)); // Save array of strings\n    setColors(newColorsArray);\n  };\n  const handleColorChange = color => {\n    setCurrentColor(color.hex);\n  };\n  const selectMyColor = color => {\n    setCurrentColor(color);\n  };\n  const goBack = () => {\n    navigate('/my-palettes');\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: goBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => addNewColor(currentColor),\n          children: \"Add Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ColorPickerContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ChromePicker, {\n        color: currentColor,\n        onChangeComplete: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TwitterPicker, {\n        colors: loadedColorStrings,\n        color: currentColor,\n        onChangeComplete: handleColorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ColorGrid, {\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(ColorSwatch, {\n        color: color,\n        children: color.toUpperCase()\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(CreatePalette, \"Vs0rB2pykORWOQUCzACOkODxRCU=\", false, function () {\n  return [useNavigate];\n});\n_c7 = CreatePalette;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"ColorGrid\");\n$RefreshReg$(_c4, \"ColorSwatch\");\n$RefreshReg$(_c5, \"Button\");\n$RefreshReg$(_c6, \"ColorPickerContainer\");\n$RefreshReg$(_c7, \"CreatePalette\");","map":{"version":3,"names":["React","useState","useEffect","styled","useNavigate","ChromePicker","TwitterPicker","jsxDEV","_jsxDEV","Container","div","_c","Header","_c2","ColorGrid","_c3","ColorSwatch","props","color","_c4","Dropdown","select","Button","button","_c5","ColorPickerContainer","_c6","MyColorsList","MyColorSwatch","CreatePalette","_s","navigate","loadedColorObjects","JSON","parse","localStorage","getItem","loadedColorStrings","map","colorObj","hex","setMyColors","colorFormat","setColorFormat","colors","setColors","currentColor","setCurrentColor","myColors","addNewColor","newColorsArray","setItem","stringify","handleColorChange","selectMyColor","goBack","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChangeComplete","index","toUpperCase","_c7","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/CreatePalette.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { ChromePicker, TwitterPicker } from 'react-color';\n\n\n\n\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    margin-bottom: 20px;\n`;\n\nconst ColorGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    gap: 10px;\n    width: 100%;\n`;\n\nconst ColorSwatch = styled.div`\n    height: 150px;\n    background-color: ${(props) => props.color};\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    color: #fff;\n    font-weight: bold;\n    padding: 10px;\n`;\n\nconst Dropdown = styled.select`\n  padding: 5px;\n  margin-right: 10px;\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  margin: 0 5px;\n`;\n\nconst ColorPickerContainer = styled.div`\n  margin: 20px 0;\n`;\n\nconst MyColorsList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 10px;\n`;\n\nconst MyColorSwatch = styled.div`\n  width: 50px;\n  height: 50px;\n  background-color: ${(props) => props.color};\n  border-radius: 5px;\n  cursor: pointer;\n`;\n\nexport default function CreatePalette() {\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const loadedColorObjects = JSON.parse(localStorage.getItem('colors')) || [];\n        // Ensure the name used here for the array of strings is the same as the one used to set the state\n        const loadedColorStrings = loadedColorObjects.map(colorObj => colorObj.hex);\n        setMyColors(loadedColorStrings);\n      }, []);\n      \n\n    \n    const [colorFormat, setColorFormat] = useState('hex');\n    const [colors, setColors] = useState([\n        '#1ABC9C',\n        '#16A085',\n        '#9B59B6',\n        '#E74C3C',\n        '#2C3E50',\n    ]);\n    const [currentColor, setCurrentColor] = useState('#fff'); // State to track the current color from the picker\n    const [myColors, setMyColors] = useState([]); \n\n\n\n\n    \n      const addNewColor = (color) => {\n        setColors([...colors, color]);\n        const newColorsArray = [...myColors, color]; // Add new color string to array\n        localStorage.setItem('colors', JSON.stringify(newColorsArray)); // Save array of strings\n        setColors(newColorsArray);\n      };\n    \n      const handleColorChange = (color) => {\n        setCurrentColor(color.hex);\n      };\n    \n      const selectMyColor = (color) => {\n        setCurrentColor(color);\n      };\n    \n      const goBack = () => {\n        navigate('/my-palettes');\n      };\n    \n      return (\n        <Container>\n          <Header>\n            <Button onClick={goBack}>Back</Button>\n            <div>\n              <Button onClick={() => addNewColor(currentColor)}>Add Color</Button>\n            </div>\n          </Header>\n          <ColorPickerContainer>\n            <ChromePicker color={currentColor} onChangeComplete={handleColorChange} />\n            <TwitterPicker\n                colors={loadedColorStrings}\n                color={currentColor}\n                onChangeComplete={handleColorChange}\n            />\n          </ColorPickerContainer>\n         \n\n\n          <ColorGrid>\n            {colors.map((color, index) => (\n              <ColorSwatch key={index} color={color}>\n                {color.toUpperCase()}\n              </ColorSwatch>\n            ))}\n          </ColorGrid>\n        </Container>\n      );\n    }\n    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}