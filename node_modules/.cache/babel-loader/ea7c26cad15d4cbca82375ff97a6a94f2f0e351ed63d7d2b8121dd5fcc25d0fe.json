{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyColors({\n  colors\n}) {\n  // A function to convert RGBA to HEX\n  const rgbaToHex = (r, g, b, a = 1) => {\n    // If alpha is 1, no need to convert it to hex\n    if (a === 1) {\n      return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();\n    } else {\n      // Convert alpha from [0,1] to [0,255] then to hex\n      let alphaHex = Math.round(a * 255).toString(16);\n      if (alphaHex.length === 1) {\n        alphaHex = \"0\" + alphaHex;\n      }\n      return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase() + alphaHex;\n    }\n  };\n\n  // A function to extract RGBA values from the string\n  const extractRGBA = rgbaStr => {\n    const [r, g, b, a] = rgbaStr.match(/\\d+/g).map(Number);\n    return rgbaToHex(r, g, b, a);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Colors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center'\n      },\n      children: colors.map((color, index) => {\n        const hexColor = extractRGBA(color.hex);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100px',\n              height: '100px',\n              backgroundColor: hexColor,\n              marginBottom: '5px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center'\n            },\n            children: hexColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_c = MyColors;\nvar _c;\n$RefreshReg$(_c, \"MyColors\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MyColors","colors","rgbaToHex","r","g","b","a","toString","slice","toUpperCase","alphaHex","Math","round","length","extractRGBA","rgbaStr","match","map","Number","style","display","flexDirection","alignItems","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","flexWrap","justifyContent","color","index","hexColor","hex","margin","width","height","backgroundColor","marginBottom","textAlign","_c","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js"],"sourcesContent":["import React from 'react';\n\nfunction MyColors({ colors }) {\n    // A function to convert RGBA to HEX\n    const rgbaToHex = (r, g, b, a = 1) => {\n        // If alpha is 1, no need to convert it to hex\n        if (a === 1) {\n            return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();\n        } else {\n            // Convert alpha from [0,1] to [0,255] then to hex\n            let alphaHex = Math.round(a * 255).toString(16);\n            if (alphaHex.length === 1) {\n                alphaHex = \"0\" + alphaHex;\n            }\n            return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase() + alphaHex;\n        }\n    };\n\n    // A function to extract RGBA values from the string\n    const extractRGBA = (rgbaStr) => {\n        const [r, g, b, a] = rgbaStr.match(/\\d+/g).map(Number);\n        return rgbaToHex(r, g, b, a);\n    };\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '20px' }}>\n            <h1>My Colors</h1>\n            <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\n                {colors.map((color, index) => {\n                    const hexColor = extractRGBA(color.hex);\n                    return (\n                        <div key={index} style={{ margin: '10px' }}>\n                            <div style={{\n                                width: '100px',\n                                height: '100px',\n                                backgroundColor: hexColor,\n                                marginBottom: '5px'\n                            }}></div>\n                            <div style={{ textAlign: 'center' }}>{hexColor}</div>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}