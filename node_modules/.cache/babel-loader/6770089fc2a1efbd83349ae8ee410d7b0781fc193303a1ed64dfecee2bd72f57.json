{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/* eslint-disable eslint-comments/no-unlimited-disable */\n\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask'; // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\nlet gestureInstances = 0;\nclass GestureHandler {\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  } // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n\n  get isNative() {\n    return false;\n  }\n  get isDiscrete() {\n    return false;\n  }\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n  constructor() {\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"isGestureRunning\", false);\n    _defineProperty(this, \"view\", null);\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n    _defineProperty(this, \"hasGestureFailed\", false);\n    _defineProperty(this, \"hammer\", null);\n    _defineProperty(this, \"initialRotation\", null);\n    _defineProperty(this, \"__initialX\", void 0);\n    _defineProperty(this, \"__initialY\", void 0);\n    _defineProperty(this, \"config\", {});\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n    _defineProperty(this, \"pendingGestures\", {});\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"gestureInstance\", void 0);\n    _defineProperty(this, \"_stillWaiting\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"clearSelfAsPending\", () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    });\n    _defineProperty(this, \"destroy\", () => {\n      this.clearSelfAsPending();\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n      this.hammer = null;\n    });\n    _defineProperty(this, \"isPointInView\", ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n    _defineProperty(this, \"sendEvent\", nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n    _defineProperty(this, \"sync\", () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        } // Prevent events before the system is ready.\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n        if (this.hasGestureFailed) {\n          return false;\n        }\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n\n          this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            } // This gesture shouldn't start until the others have finished.\n\n            return false;\n          }\n        } // Use default behaviour\n\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n          ...inputData,\n          deltaRotation\n        });\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n\n      gesture.set({\n        ...params,\n        enable\n      });\n    });\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n  getConfig() {\n    return this.config;\n  }\n  onWaitingEnded(_gesture) {}\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n  isGestureEnabledForEvent(_config, _recognizer, _event) {\n    return {\n      success: true\n    };\n  }\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n  updateHasCustomActivationCriteria(_config) {\n    return true;\n  }\n  updateGestureConfig({\n    enabled = true,\n    ...props\n  }) {\n    this.clearSelfAsPending();\n    this.config = this.ensureConfig({\n      enabled,\n      ...props\n    });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n  getState(type) {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n  transformEventData(event) {\n    const {\n      eventType,\n      maxPointers: numberOfPointers\n    } = event; // const direction = DirectionMap[ev.direction];\n\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY\n    }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n\n    const state = this.getState(eventType);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n      },\n      timeStamp: Date.now()\n    };\n  }\n  transformNativeEvent(_event) {\n    return {};\n  }\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  } // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true\n    });\n    this.onGestureEnded(event);\n  }\n  onRawEvent({\n    isFirst\n  }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n  shouldUseTouchEvents(config) {\n    var _config$simultaneousH, _config$simultaneousH2;\n    return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) === null || _config$simultaneousH2 === void 0 ? void 0 : _config$simultaneousH2.some(handler => handler.isNative)) !== null && _config$simultaneousH !== void 0 ? _config$simultaneousH : false;\n  }\n  setView(ref, propsRef) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    } // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n\n    const SUPPORTS_TOUCH = ('ontouchstart' in window);\n    this.propsRef = propsRef;\n    this.ref = ref;\n    this.view = findNodeHandle(ref); // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n\n    this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.Manager(this.view, {\n      inputClass: Hammer.TouchInput\n    }) : new Hammer.Manager(this.view);\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    const {\n      NativeGestureClass\n    } = this; // @ts-ignore TODO(TS)\n\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n      this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n    this.setupEvents();\n    this.sync();\n  }\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n        this.onGestureEnded(event);\n      });\n    }\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n  onStart({\n    deltaX,\n    deltaY,\n    rotation\n  }) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n  onSuccess() {}\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(({\n        hasGestureFailed\n      }) => hasGestureFailed === false);\n      return stillWaiting;\n    }\n    return [];\n  }\n  getHammerConfig() {\n    const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n    return {\n      pointers\n    };\n  }\n  simulateCancelEvent(_inputData) {} // Validate the props\n\n  ensureConfig(config) {\n    const props = {\n      ...config\n    }; // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist * props.minDist;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity * props.minVelocity;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist * config.maxDist;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor).map(({\n        handlerTag\n      }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n        if (typeof handler === 'number') {\n          return NodeManager.getHandler(handler);\n        } else {\n          return NodeManager.getHandler(handler.handlerTag);\n        }\n      }).filter(v => v);\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n    const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n    configProps.forEach(prop => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props; // TODO(TS) how to convince TS that props are filled?\n  }\n} // TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const {\n            argMapping\n          } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction asArray(value) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nexport default GestureHandler;","map":{"version":3,"names":["Hammer","findNodeHandle","State","EventMap","NodeManager","ghQueueMicrotask","gestureInstances","GestureHandler","id","name","gestureInstance","isNative","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","_defineProperty","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","clearSelfAsPending","hammer","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","event","transformEventData","invokeNullableMethod","lastSentState","state","get","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","success","failed","isGestureEnabledForEvent","getConfig","simulateCancelEvent","params","getHammerConfig","set","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","props","ensureConfig","sync","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","INPUT_CANCEL","isFinal","onRawEvent","isFirst","shouldUseTouchEvents","_config$simultaneousH","_config$simultaneousH2","simultaneousHandlers","some","handler","setView","SUPPORTS_TOUCH","window","Manager","inputClass","TouchInput","add","on","ev","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","pointers","minPointers","_inputData","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","getHandler","v","configProps","forEach","prop","Number","NaN","method","__getHandler","argMapping","__nodeConfig","index","key","value","entries","nativeValue","setValue"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/web_hammer/GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n  simultaneousHandlers: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n  get isNative() {\n    return false;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = this.ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange } =\n      this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  shouldUseTouchEvents(config: Config) {\n    return (\n      config.simultaneousHandlers?.some((handler) => handler.isNative) ?? false\n    );\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n\n    // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n    this.hammer =\n      SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config)\n        ? new Hammer.Manager(this.view as any, {\n            inputClass: Hammer.TouchInput,\n          })\n        : new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev as unknown as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart(event as unknown as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded(event as unknown as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated(ev as unknown as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n\n  // Validate the props\n  ensureConfig(config: Config): Required<Config> {\n    const props = { ...config };\n\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist! * props.minDist!;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist! * config.maxDist!;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor)\n        .map(({ handlerTag }: { handlerTag: number }) =>\n          NodeManager.getHandler(handlerTag)\n        )\n        .filter((v) => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers)\n        .map((handler: number | GestureHandler) => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        })\n        .filter((v) => v);\n\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n\n    const configProps = [\n      'minPointers',\n      'maxPointers',\n      'minDist',\n      'maxDist',\n      'maxDistSq',\n      'minVelocitySq',\n      'minDistSq',\n      'minVelocity',\n      'failOffsetXStart',\n      'failOffsetYStart',\n      'failOffsetXEnd',\n      'failOffsetYEnd',\n      'activeOffsetXStart',\n      'activeOffsetXEnd',\n      'activeOffsetYStart',\n      'activeOffsetYEnd',\n    ] as const;\n    configProps.forEach((prop: typeof configProps[number]) => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n  }\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}