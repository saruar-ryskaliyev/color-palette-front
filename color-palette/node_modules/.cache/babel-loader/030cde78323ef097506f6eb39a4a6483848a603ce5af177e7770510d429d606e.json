{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Remove all accentuated characters from a string\n */\nconst stripAccents = input => {\n  const accents = \"ÀÁÂÃÄÅĄĀàáâãäåąāÒÓÔÕÕÖØòóôõöøÈÉÊËĘĒèéêëðęēÇĆČçćčÐÌÍÎÏĪìíîïīÙÚÛÜŪùúûüūÑŅñņŠŚšśŸÿýŽŹŻžźżŁĻłļŃŅńņàáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîüûñçýỳỹỵỷğışĞİŞĢģĶķ\";\n  const fixes = \"AAAAAAAAaaaaaaaaOOOOOOOooooooEEEEEEeeeeeeeCCCcccDIIIIIiiiiiUUUUUuuuuuNNnnSSssYyyZZZzzzLLllNNnnaaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiuuncyyyyygisGISGgKk\";\n  const split = accents.split(\"\").join(\"|\");\n  const reg = new RegExp(`(${split})`, \"g\");\n  function replacement(a) {\n    return fixes[accents.indexOf(a)] || \"\";\n  }\n  return input.replace(reg, replacement);\n};\nconst getSafeRegexpString = input => input.split(\"\").map(char => `\\\\${char}`).join(\"\");\n/**\n * Harmonize a string by removing spaces, non-alphabetical caracters and by\n * adding delimiter\n */\nconst harmonize = (input, delimiter, ignoreInvalid = false) => {\n  const harmonized = stripAccents(input).trim().toLowerCase();\n  const safeDelimiter = getSafeRegexpString(delimiter);\n  if (ignoreInvalid) {\n    return harmonized.replace(/\\s+/g, delimiter);\n  }\n  return harmonized.replace(new RegExp(`[^a-z0-9${safeDelimiter}]+`, \"g\"), delimiter) // Replace all non-valid caracters by delimiter\n  .replace(new RegExp(`${safeDelimiter}+`, \"g\"), delimiter) // Remove multiple delimiters repetition\n  .replace(new RegExp(`^${safeDelimiter}`, \"g\"), \"\") // remove delimiter at the beginning\n  .replace(new RegExp(`${safeDelimiter}$`, \"g\"), \"\"); // remove delimiter at the end\n};\n/**\n * Slugify a React node\n */\nconst slugify = (node, options = {\n  delimiter: \"-\",\n  prefix: \"\"\n}) => {\n  if (!options.delimiter) options.delimiter = \"-\";\n  if (!options.prefix) options.prefix = \"\";\n  if (!node || typeof node === \"boolean\") {\n    return \"\";\n  }\n  const {\n    delimiter,\n    prefix\n  } = options;\n  // boolean\n  if (typeof node === \"boolean\") {\n    return \"\"; // not much we can do here\n  }\n  // string, number\n  if (typeof node === \"string\" || typeof node === \"number\") {\n    const harmonizedPrefix = harmonize(prefix, delimiter, true);\n    const harmonizedNode = harmonize(String(node), delimiter);\n    if (harmonizedPrefix) {\n      return `${harmonizedPrefix}${delimiter}${harmonizedNode}`;\n    }\n    return harmonizedNode;\n  }\n  // ReactPortal\n  if (\"children\" in node) {\n    return slugify(node.children);\n  }\n  // ReactElement\n  if (\"type\" in node) return slugify(node.props.children, options);\n  // ReactFragment (including array of nodes)\n  if (Symbol.iterator in node) {\n    return slugify(Array.from(node).map(subNode => slugify(subNode, {\n      delimiter\n    })).join(delimiter), options);\n  }\n  // unhandled case\n  return \"\";\n};\nexports.default = slugify;","map":{"version":3,"names":["stripAccents","input","accents","fixes","split","join","reg","RegExp","replacement","a","indexOf","replace","getSafeRegexpString","map","char","harmonize","delimiter","ignoreInvalid","harmonized","trim","toLowerCase","safeDelimiter","slugify","node","options","prefix","harmonizedPrefix","harmonizedNode","String","children","props","Symbol","iterator","Array","from","subNode","exports","default"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-slugify/src/slugify.ts"],"sourcesContent":["import * as React from \"react\";\n\n/**\n * Remove all accentuated characters from a string\n */\nconst stripAccents = (input: string): string => {\n  const accents =\n    \"ÀÁÂÃÄÅĄĀàáâãäåąāÒÓÔÕÕÖØòóôõöøÈÉÊËĘĒèéêëðęēÇĆČçćčÐÌÍÎÏĪìíîïīÙÚÛÜŪùúûüūÑŅñņŠŚšśŸÿýŽŹŻžźżŁĻłļŃŅńņàáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîüûñçýỳỹỵỷğışĞİŞĢģĶķ\";\n  const fixes =\n    \"AAAAAAAAaaaaaaaaOOOOOOOooooooEEEEEEeeeeeeeCCCcccDIIIIIiiiiiUUUUUuuuuuNNnnSSssYyyZZZzzzLLllNNnnaaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiuuncyyyyygisGISGgKk\";\n  const split = accents.split(\"\").join(\"|\");\n  const reg = new RegExp(`(${split})`, \"g\");\n\n  function replacement(a: string) {\n    return fixes[accents.indexOf(a)] || \"\";\n  }\n\n  return input.replace(reg, replacement);\n};\n\nconst getSafeRegexpString = (input: string): string =>\n  input\n    .split(\"\")\n    .map((char) => `\\\\${char}`)\n    .join(\"\");\n\n/**\n * Harmonize a string by removing spaces, non-alphabetical caracters and by\n * adding delimiter\n */\nconst harmonize = (\n  input: string,\n  delimiter: string,\n  ignoreInvalid = false\n): string => {\n  const harmonized = stripAccents(input).trim().toLowerCase();\n  const safeDelimiter = getSafeRegexpString(delimiter);\n\n  if (ignoreInvalid) {\n    return harmonized.replace(/\\s+/g, delimiter);\n  }\n\n  return harmonized\n    .replace(new RegExp(`[^a-z0-9${safeDelimiter}]+`, \"g\"), delimiter) // Replace all non-valid caracters by delimiter\n    .replace(new RegExp(`${safeDelimiter}+`, \"g\"), delimiter) // Remove multiple delimiters repetition\n    .replace(new RegExp(`^${safeDelimiter}`, \"g\"), \"\") // remove delimiter at the beginning\n    .replace(new RegExp(`${safeDelimiter}$`, \"g\"), \"\"); // remove delimiter at the end\n};\n\ninterface SlugifyOptions {\n  delimiter?: string;\n  prefix?: string;\n}\n\n/**\n * Slugify a React node\n */\nconst slugify = (\n  node: React.ReactNode,\n  options: SlugifyOptions = { delimiter: \"-\", prefix: \"\" }\n): string => {\n  if (!options.delimiter) options.delimiter = \"-\";\n  if (!options.prefix) options.prefix = \"\";\n\n  if (!node || typeof node === \"boolean\") {\n    return \"\";\n  }\n\n  const { delimiter, prefix } = options;\n\n  // boolean\n  if (typeof node === \"boolean\") {\n    return \"\"; // not much we can do here\n  }\n\n  // string, number\n  if (typeof node === \"string\" || typeof node === \"number\") {\n    const harmonizedPrefix = harmonize(prefix, delimiter, true);\n    const harmonizedNode = harmonize(String(node), delimiter);\n\n    if (harmonizedPrefix) {\n      return `${harmonizedPrefix}${delimiter}${harmonizedNode}`;\n    }\n\n    return harmonizedNode;\n  }\n\n  // ReactPortal\n  if (\"children\" in node) {\n    return slugify(node.children);\n  }\n\n  // ReactElement\n  if (\"type\" in node) return slugify(node.props.children, options);\n\n  // ReactFragment (including array of nodes)\n  if (Symbol.iterator in node) {\n    return slugify(\n      Array.from(node)\n        .map((subNode) => slugify(subNode, { delimiter }))\n        .join(delimiter),\n      options\n    );\n  }\n\n  // unhandled case\n  return \"\";\n};\n\nexport default slugify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}