{"ast":null,"code":"import { State } from '../../State';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport GestureHandler from './GestureHandler';\nexport default class HoverGestureHandler extends GestureHandler {\n  init(ref, propsRef) {\n    super.init(ref, propsRef);\n  }\n  updateGestureConfig({\n    enabled = true,\n    ...props\n  }) {\n    super.updateGestureConfig({\n      enabled: enabled,\n      ...props\n    });\n  }\n  onPointerMoveOver(event) {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.tracker.addToTracker(event);\n    super.onPointerMoveOver(event);\n    if (this.getState() === State.UNDETERMINED) {\n      this.begin();\n      this.activate();\n    }\n  }\n  onPointerMoveOut(event) {\n    this.tracker.addToTracker(event);\n    super.onPointerMoveOut(event);\n    this.end();\n  }\n  onPointerMove(event) {\n    this.tracker.track(event);\n    super.onPointerMove(event);\n  }\n  onPointerCancel(event) {\n    super.onPointerCancel(event);\n    this.reset();\n  }\n}","map":{"version":3,"names":["State","GestureHandlerOrchestrator","GestureHandler","HoverGestureHandler","init","ref","propsRef","updateGestureConfig","enabled","props","onPointerMoveOver","event","getInstance","recordHandlerIfNotPresent","tracker","addToTracker","getState","UNDETERMINED","begin","activate","onPointerMoveOut","end","onPointerMove","track","onPointerCancel","reset"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/web/handlers/HoverGestureHandler.ts"],"sourcesContent":["import { State } from '../../State';\nimport { AdaptedEvent, Config } from '../interfaces';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport GestureHandler from './GestureHandler';\n\nexport default class HoverGestureHandler extends GestureHandler {\n  public init(ref: number, propsRef: React.RefObject<unknown>) {\n    super.init(ref, propsRef);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n  }\n\n  protected onPointerMoveOver(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n\n    this.tracker.addToTracker(event);\n    super.onPointerMoveOver(event);\n\n    if (this.getState() === State.UNDETERMINED) {\n      this.begin();\n      this.activate();\n    }\n  }\n\n  protected onPointerMoveOut(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerMoveOut(event);\n\n    this.end();\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tracker.track(event);\n    super.onPointerMove(event);\n  }\n\n  protected onPointerCancel(event: AdaptedEvent): void {\n    super.onPointerCancel(event);\n    this.reset();\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,aAAtB;AAEA,OAAOC,0BAAP,MAAuC,qCAAvC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,MAAMC,mBAAN,SAAkCD,cAAlC,CAAiD;EACvDE,IAAIA,CAACC,GAAD,EAAcC,QAAd,EAAkD;IAC3D,MAAMF,IAAN,CAAWC,GAAX,EAAgBC,QAAhB;EACD;EAEMC,mBAAmBA,CAAC;IAAEC,OAAO,GAAG,IAAZ;IAAkB,GAAGC;EAArB,CAAD,EAA6C;IACrE,MAAMF,mBAAN,CAA0B;MAAEC,OAAO,EAAEA,OAAX;MAAoB,GAAGC;IAAvB,CAA1B;EACD;EAESC,iBAAiBA,CAACC,KAAD,EAA4B;IACrDV,0BAA0B,CAACW,WAA3B,GAAyCC,yBAAzC,CAAmE,IAAnE;IAEA,KAAKC,OAAL,CAAaC,YAAb,CAA0BJ,KAA1B;IACA,MAAMD,iBAAN,CAAwBC,KAAxB;IAEA,IAAI,KAAKK,QAAL,OAAoBhB,KAAK,CAACiB,YAA9B,EAA4C;MAC1C,KAAKC,KAAL;MACA,KAAKC,QAAL;IACD;EACF;EAESC,gBAAgBA,CAACT,KAAD,EAA4B;IACpD,KAAKG,OAAL,CAAaC,YAAb,CAA0BJ,KAA1B;IACA,MAAMS,gBAAN,CAAuBT,KAAvB;IAEA,KAAKU,GAAL;EACD;EAESC,aAAaA,CAACX,KAAD,EAA4B;IACjD,KAAKG,OAAL,CAAaS,KAAb,CAAmBZ,KAAnB;IACA,MAAMW,aAAN,CAAoBX,KAApB;EACD;EAESa,eAAeA,CAACb,KAAD,EAA4B;IACnD,MAAMa,eAAN,CAAsBb,KAAtB;IACA,KAAKc,KAAL;EACD;AApC6D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}