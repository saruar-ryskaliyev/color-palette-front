{"ast":null,"code":"var _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Platform, UIManager, DeviceEventEmitter } from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes'; // @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\n\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag, registerOldGestureHandler } from './handlersRegistry';\nimport { filterConfig, findNodeHandle, scheduleFlushOperations } from './gestureHandlerCommon';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nconst UIManagerAny = UIManager;\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent'\n};\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  },\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() && Platform.OS === 'android' && customGHEventsConfigFabricAndroid)\n}; // Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\n\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig\n}; // In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\n\nconst UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig\n  };\n} // Wrap JS responder calls and notify gesture handler manager\n\nconst {\n  setJSResponder: oldSetJSResponder = () => {//no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {//no operation\n  }\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag, blockNativeResponder) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android'; // Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\n\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  // TODO(TS) - add type for extract arg\n  const extract = refs => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(r => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded'\n};\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1; // TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\n\nexport default function createHandler({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = []\n}) {\n  class Handler extends React.Component {\n    constructor(props) {\n      super(props);\n      _defineProperty(this, \"handlerTag\", void 0);\n      _defineProperty(this, \"config\", void 0);\n      _defineProperty(this, \"propsRef\", void 0);\n      _defineProperty(this, \"isMountedRef\", void 0);\n      _defineProperty(this, \"viewNode\", void 0);\n      _defineProperty(this, \"viewTag\", void 0);\n      _defineProperty(this, \"inspectorToggleListener\", void 0);\n      _defineProperty(this, \"onGestureHandlerEvent\", event => {\n        if (event.nativeEvent.handlerTag === this.handlerTag) {\n          if (typeof this.props.onGestureEvent === 'function') {\n            var _this$props$onGesture, _this$props;\n            (_this$props$onGesture = (_this$props = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n          }\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty(this, \"onGestureHandlerStateChange\", event => {\n        if (event.nativeEvent.handlerTag === this.handlerTag) {\n          if (typeof this.props.onHandlerStateChange === 'function') {\n            var _this$props$onHandler, _this$props3;\n            (_this$props$onHandler = (_this$props3 = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          }\n          const state = event.nativeEvent.state;\n          const stateEventName = stateToPropMappings[state];\n          const eventHandler = stateEventName && this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty(this, \"refHandler\", node => {\n        this.viewNode = node;\n        const child = React.Children.only(this.props.children); // TODO(TS) fix ref type\n\n        const {\n          ref\n        } = child;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty(this, \"createGestureHandler\", newConfig => {\n        this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, this.handlerTag, newConfig);\n      });\n      _defineProperty(this, \"attachGestureHandler\", newViewTag => {\n        this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n          RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, ActionType.JS_FUNCTION_OLD_API,\n          // ignored on web\n          this.propsRef);\n        } else {\n          registerOldGestureHandler(this.handlerTag, {\n            onGestureEvent: this.onGestureHandlerEvent,\n            onGestureStateChange: this.onGestureHandlerStateChange\n          });\n          const actionType = (() => {\n            var _this$props5, _this$props6, _this$props7;\n            if ((_this$props5 = this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && 'current' in this.props.onGestureEvent || (_this$props6 = this.props) !== null && _this$props6 !== void 0 && _this$props6.onHandlerStateChange && 'current' in this.props.onHandlerStateChange) {\n              // Reanimated worklet\n              return ActionType.REANIMATED_WORKLET;\n            } else if ((_this$props7 = this.props) !== null && _this$props7 !== void 0 && _this$props7.onGestureEvent && '__isNative' in this.props.onGestureEvent) {\n              // Animated.event with useNativeDriver: true\n              return ActionType.NATIVE_ANIMATED_EVENT;\n            } else {\n              // JS callback or Animated.event with useNativeDriver: false\n              return ActionType.JS_FUNCTION_OLD_API;\n            }\n          })();\n          RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, actionType);\n        }\n        scheduleFlushOperations();\n      });\n      _defineProperty(this, \"updateGestureHandler\", newConfig => {\n        this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n        scheduleFlushOperations();\n      });\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = /*#__PURE__*/React.createRef();\n      this.isMountedRef = /*#__PURE__*/React.createRef();\n      this.state = {\n        allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n    componentDidMount() {\n      const props = this.props;\n      this.isMountedRef.current = true;\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', () => {\n          this.setState(_ => ({\n            allowTouches\n          }));\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n      this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config));\n      this.attachGestureHandler(findNodeHandle(this.viewNode)); // TODO(TS) - check if this can be null\n    }\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n    componentWillUnmount() {\n      var _this$inspectorToggle;\n      (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations(); // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n\n      const handlerID = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n    update(remainingTries) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n      const props = this.props; // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config);\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n    setNativeProps(updates) {\n      const mergedProps = {\n        ...this.props,\n        ...updates\n      };\n      const newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [...allowedProps, ...customNativeProps], config);\n      this.updateGestureHandler(newConfig);\n    }\n    render() {\n      var _this$props$testID;\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');\n      }\n      let gestureEventHandler = this.onGestureHandlerEvent; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent\n      } = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n      let gestureStateEventHandler = this.onGestureHandlerStateChange; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange\n      } = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n      };\n      this.propsRef.current = events;\n      let child = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(tagMessage(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n      }\n      let grandChildren = child.props.children;\n      if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push( /*#__PURE__*/React.createElement(PressabilityDebugView, {\n          key: \"pressabilityDebugView\",\n          color: \"mediumspringgreen\",\n          hitSlop: child.props.hitSlop\n        }));\n      }\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: this.refHandler,\n        collapsable: false,\n        ...(isJestEnv() ? {\n          handlerType: name,\n          handlerTag: this.handlerTag\n        } : {}),\n        testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID,\n        ...events\n      }, grandChildren);\n    }\n  }\n  _defineProperty(Handler, \"displayName\", name);\n  _defineProperty(Handler, \"contextType\", GestureHandlerRootViewContext);\n  return Handler;\n}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","registerOldGestureHandler","filterConfig","findNodeHandle","scheduleFlushOperations","isFabric","isJestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","_this$props7","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","createRef","isMountedRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","remainingTries","setNativeProps","updates","mergedProps","render","_this$props$testID","context","gestureEventHandler","gestureStateEventHandler","events","e","grandChildren","type","displayName","toArray","push","createElement","key","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/handlers/createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            (this.props?.onGestureEvent &&\n              'current' in this.props.onGestureEvent) ||\n            (this.props?.onHandlerStateChange &&\n              'current' in this.props.onHandlerStateChange)\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}