{"ast":null,"code":"import React from 'react';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport colorKit from \"../../../colorKit/index\";\nimport { styles } from \"../../../styles\";\nimport { enableAndroidHardwareTextures, getStyle } from \"../../../utils\";\nexport default function Ring({\n  width,\n  height,\n  borderRadius,\n  adaptiveColor,\n  handleStyle,\n  innerStyle,\n  solidColor,\n  style\n}) {\n  const ringStyle = {\n    width,\n    height,\n    borderRadius,\n    borderWidth: 1\n  };\n  const borderColor = getStyle(style, 'borderColor');\n  const ringBackgroundColor = getStyle(style, 'backgroundColor');\n  const adaptiveColorStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: ringBackgroundColor ?? colorKit.runOnUI().setAlpha(adaptiveColor.value, 0.5).hex(),\n      borderColor: borderColor ?? adaptiveColor.value\n    };\n  }, [adaptiveColor]);\n\n  // Make sure to match the parity (odd or even) of the parent width, to solve the centering issue\n  const innerWidth = 0.75 * width;\n  const innerSize = width % 2 === 0 ? Math.floor(innerWidth / 2) * 2 : Math.floor(innerWidth / 2) * 2 + 1;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.handle, ringStyle, adaptiveColorStyle, style, handleStyle],\n    renderToHardwareTextureAndroid: enableAndroidHardwareTextures\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.shadow, {\n      borderRadius,\n      zIndex: 100,\n      width: innerSize,\n      height: innerSize\n    }, solidColor, innerStyle]\n  }));\n}","map":{"version":3,"names":["React","Animated","useAnimatedStyle","colorKit","styles","enableAndroidHardwareTextures","getStyle","Ring","width","height","borderRadius","adaptiveColor","handleStyle","innerStyle","solidColor","style","ringStyle","borderWidth","borderColor","ringBackgroundColor","adaptiveColorStyle","backgroundColor","runOnUI","setAlpha","value","hex","innerWidth","innerSize","Math","floor","createElement","View","handle","renderToHardwareTextureAndroid","shadow","zIndex"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/reanimated-color-picker/lib/src/components/Thumb/BuiltinThumbs/Ring.tsx"],"sourcesContent":["import React from 'react';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport colorKit from '../../../colorKit/index';\nimport { styles } from '../../../styles';\nimport { enableAndroidHardwareTextures, getStyle } from '../../../utils';\n\nimport type { BuiltinThumbsProps } from '../../../types';\n\nexport default function Ring({\n  width,\n  height,\n  borderRadius,\n  adaptiveColor,\n  handleStyle,\n  innerStyle,\n  solidColor,\n  style,\n}: BuiltinThumbsProps) {\n  const ringStyle = {\n    width,\n    height,\n    borderRadius,\n    borderWidth: 1,\n  };\n\n  const borderColor = getStyle(style, 'borderColor');\n  const ringBackgroundColor = getStyle(style, 'backgroundColor');\n\n  const adaptiveColorStyle = useAnimatedStyle(() => {\n    return {\n      backgroundColor: ringBackgroundColor ?? colorKit.runOnUI().setAlpha(adaptiveColor.value, 0.5).hex(),\n      borderColor: borderColor ?? adaptiveColor.value,\n    };\n  }, [adaptiveColor]);\n\n  // Make sure to match the parity (odd or even) of the parent width, to solve the centering issue\n  const innerWidth = 0.75 * width;\n  const innerSize = width % 2 === 0 ? Math.floor(innerWidth / 2) * 2 : Math.floor(innerWidth / 2) * 2 + 1;\n\n  return (\n    <Animated.View\n      style={[styles.handle, ringStyle, adaptiveColorStyle, style, handleStyle]}\n      renderToHardwareTextureAndroid={enableAndroidHardwareTextures}\n    >\n      <Animated.View\n        style={[styles.shadow, { borderRadius, zIndex: 100, width: innerSize, height: innerSize }, solidColor, innerStyle]}\n      />\n    </Animated.View>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,IAAIC,gBAAgB,QAAQ,yBAAyB;AAEpE,OAAOC,QAAQ;AACf,SAASC,MAAM;AACf,SAASC,6BAA6B,EAAEC,QAAQ;AAIhD,eAAe,SAASC,IAAIA,CAAC;EAC3BC,KAAK;EACLC,MAAM;EACNC,YAAY;EACZC,aAAa;EACbC,WAAW;EACXC,UAAU;EACVC,UAAU;EACVC;AACkB,CAAC,EAAE;EACrB,MAAMC,SAAS,GAAG;IAChBR,KAAK;IACLC,MAAM;IACNC,YAAY;IACZO,WAAW,EAAE;EACf,CAAC;EAED,MAAMC,WAAW,GAAGZ,QAAQ,CAACS,KAAK,EAAE,aAAa,CAAC;EAClD,MAAMI,mBAAmB,GAAGb,QAAQ,CAACS,KAAK,EAAE,iBAAiB,CAAC;EAE9D,MAAMK,kBAAkB,GAAGlB,gBAAgB,CAAC,MAAM;IAChD,OAAO;MACLmB,eAAe,EAAEF,mBAAmB,IAAIhB,QAAQ,CAACmB,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACZ,aAAa,CAACa,KAAK,EAAE,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;MACnGP,WAAW,EAAEA,WAAW,IAAIP,aAAa,CAACa;IAC5C,CAAC;EACH,CAAC,EAAE,CAACb,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMe,UAAU,GAAG,IAAI,GAAGlB,KAAK;EAC/B,MAAMmB,SAAS,GAAGnB,KAAK,GAAG,CAAC,KAAK,CAAC,GAAGoB,IAAI,CAACC,KAAK,CAACH,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,GAAGE,IAAI,CAACC,KAAK,CAACH,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;EAEvG,oBACE1B,KAAA,CAAA8B,aAAA,CAAC7B,QAAQ,CAAC8B,IAAI;IACZhB,KAAK,EAAE,CAACX,MAAM,CAAC4B,MAAM,EAAEhB,SAAS,EAAEI,kBAAkB,EAAEL,KAAK,EAAEH,WAAW,CAAE;IAC1EqB,8BAA8B,EAAE5B;EAA8B,gBAE9DL,KAAA,CAAA8B,aAAA,CAAC7B,QAAQ,CAAC8B,IAAI;IACZhB,KAAK,EAAE,CAACX,MAAM,CAAC8B,MAAM,EAAE;MAAExB,YAAY;MAAEyB,MAAM,EAAE,GAAG;MAAE3B,KAAK,EAAEmB,SAAS;MAAElB,MAAM,EAAEkB;IAAU,CAAC,EAAEb,UAAU,EAAED,UAAU;EAAE,CACpH,CACY,CAAC;AAEpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}