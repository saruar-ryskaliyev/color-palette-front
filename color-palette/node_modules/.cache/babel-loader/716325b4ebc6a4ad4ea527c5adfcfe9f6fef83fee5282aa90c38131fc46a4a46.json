{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/MyProfile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { BASE_URL } from '../constants';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaletteGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  padding: 20px;\n`;\n_c = PaletteGrid;\nconst PaletteBox = styled.div`\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: #f9f9f9;\n  &:hover {\n    background-color: #e9e9e9;\n  }\n`;\n_c2 = PaletteBox;\nconst ColorPreview = styled.div`\n  height: 40px;\n  width: 100%;\n  background-color: ${props => props.color};\n`;\n_c3 = ColorPreview;\nconst ColorsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 10px;\n`;\n_c4 = ColorsGrid;\nconst ColorItem = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  background-color: ${props => props.color};\n  color: white;\n  text-align: center;\n`;\n_c5 = ColorItem;\nfunction ProfileDetails() {\n  _s();\n  const [colors, setColors] = useState([]);\n  const [palettes, setPalettes] = useState([]);\n  const {\n    user_id\n  } = useParams();\n  const downloadPaletteAsPNG = async (paletteRef, paletteName) => {\n    const canvas = await html2canvas(paletteRef);\n    const image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    let link = document.createElement('a');\n    link.download = `${paletteName}.png`;\n    link.href = image;\n    link.click();\n  };\n  useEffect(() => {\n    fetch(`${BASE_URL}/users/${user_id}/colors`, {\n      method: 'GET',\n      headers: {\n        'accept': 'application/json'\n      }\n    }).then(response => response.json()).then(result => {\n      if (result.colors) {\n        setColors(result.colors.map(colorCode => ({\n          hex: colorCode.startsWith('#') ? colorCode : `#${colorCode}`\n        })));\n      }\n    }).catch(error => console.error('Error fetching colors:', error));\n    fetch(`${BASE_URL}/users/${user_id}/palettes`, {\n      method: 'GET',\n      headers: {\n        'accept': 'application/json'\n      }\n    }).then(response => response.json()).then(result => {\n      console.log(result);\n      // Directly use Object.entries on result since result is the object containing the palettes\n      const palettesArray = Object.entries(result).map(([name, colors]) => ({\n        name,\n        colors: colors.map(color => `#${color}`) // Ensure each color starts with '#'\n      }));\n      setPalettes(palettesArray);\n    }).catch(error => console.error('Error fetching palettes:', error));\n  }, [user_id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Colors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorsGrid, {\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(ColorItem, {\n        color: color.hex,\n        children: color.hex\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Palettes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaletteGrid, {\n      children: palettes.map(palette => /*#__PURE__*/_jsxDEV(PaletteBox, {\n        ref: el => this[palette.name] = el,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: palette.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), palette.colors.map((color, index) => /*#__PURE__*/_jsxDEV(ColorPreview, {\n          color: color\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => downloadPaletteAsPNG(this[palette.name], palette.name),\n          children: \"Download PNG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, palette.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(ProfileDetails, \"WERZqlGs1T1cwoAXv1FWgLpaGgE=\", false, function () {\n  return [useParams];\n});\n_c6 = ProfileDetails;\nexport default ProfileDetails;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PaletteGrid\");\n$RefreshReg$(_c2, \"PaletteBox\");\n$RefreshReg$(_c3, \"ColorPreview\");\n$RefreshReg$(_c4, \"ColorsGrid\");\n$RefreshReg$(_c5, \"ColorItem\");\n$RefreshReg$(_c6, \"ProfileDetails\");","map":{"version":3,"names":["React","useState","useEffect","styled","BASE_URL","useParams","jsxDEV","_jsxDEV","PaletteGrid","div","_c","PaletteBox","_c2","ColorPreview","props","color","_c3","ColorsGrid","_c4","ColorItem","_c5","ProfileDetails","_s","colors","setColors","palettes","setPalettes","user_id","downloadPaletteAsPNG","paletteRef","paletteName","canvas","html2canvas","image","toDataURL","replace","link","document","createElement","download","href","click","fetch","method","headers","then","response","json","result","map","colorCode","hex","startsWith","catch","error","console","log","palettesArray","Object","entries","name","children","fileName","_jsxFileName","lineNumber","columnNumber","index","palette","ref","el","onClick","_c6","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/MyProfile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { BASE_URL } from '../constants';\nimport { useParams } from 'react-router-dom';\n\nconst PaletteGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  padding: 20px;\n`;\n\nconst PaletteBox = styled.div`\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: #f9f9f9;\n  &:hover {\n    background-color: #e9e9e9;\n  }\n`;\n\nconst ColorPreview = styled.div`\n  height: 40px;\n  width: 100%;\n  background-color: ${props => props.color};\n`;\n\nconst ColorsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 10px;\n`;\n\nconst ColorItem = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  background-color: ${props => props.color};\n  color: white;\n  text-align: center;\n`;\n\nfunction ProfileDetails() {\n  const [colors, setColors] = useState([]);\n  const [palettes, setPalettes] = useState([]);\n  const { user_id } = useParams();\n\n  const downloadPaletteAsPNG = async (paletteRef, paletteName) => {\n    const canvas = await html2canvas(paletteRef);\n    const image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    let link = document.createElement('a');\n    link.download = `${paletteName}.png`;\n    link.href = image;\n    link.click();\n  };\n\n\n  useEffect(() => {\n    fetch(`${BASE_URL}/users/${user_id}/colors`, {\n      method: 'GET',\n      headers: { 'accept': 'application/json' },\n    }).then(response => response.json())\n      .then(result => {\n        if (result.colors) {\n          setColors(result.colors.map(colorCode => ({\n            hex: colorCode.startsWith('#') ? colorCode : `#${colorCode}`\n          })));\n        }\n      })\n      .catch(error => console.error('Error fetching colors:', error));\n\n\n\n    fetch(`${BASE_URL}/users/${user_id}/palettes`, {\n        method: 'GET',\n        headers: { 'accept': 'application/json' },\n      }).then(response => response.json())\n        .then(result => {\n          console.log(result);\n          // Directly use Object.entries on result since result is the object containing the palettes\n          const palettesArray = Object.entries(result).map(([name, colors]) => ({\n            name,\n            colors: colors.map(color => `#${color}`)  // Ensure each color starts with '#'\n          }));\n          setPalettes(palettesArray);\n        })\n        .catch(error => console.error('Error fetching palettes:', error));\n      \n\n  }, [user_id]);\n\n  return (\n    <div>\n      <h1>Colors</h1>\n      <ColorsGrid>\n        {colors.map((color, index) => (\n          <ColorItem key={index} color={color.hex}>\n            {color.hex}\n          </ColorItem>\n        ))}\n      </ColorsGrid>\n      <h1>Palettes</h1>\n      <PaletteGrid>\n        {palettes.map((palette) => (\n          <PaletteBox key={palette.name} ref={el => this[palette.name] = el}>\n            <h3>{palette.name}</h3>\n            {palette.colors.map((color, index) => (\n              <ColorPreview key={index} color={color} />\n            ))}\n            <button onClick={() => downloadPaletteAsPNG(this[palette.name], palette.name)}>Download PNG</button>\n          </PaletteBox>\n        ))}\n      </PaletteGrid>\n    </div>\n  );\n}\n\nexport default ProfileDetails;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,GAAGL,MAAM,CAACM,GAAI;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,WAAW;AAOjB,MAAMG,UAAU,GAAGR,MAAM,CAACM,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAVID,UAAU;AAYhB,MAAME,YAAY,GAAGV,MAAM,CAACM,GAAI;AAChC;AACA;AACA,sBAAsBK,KAAK,IAAIA,KAAK,CAACC,KAAM;AAC3C,CAAC;AAACC,GAAA,GAJIH,YAAY;AAMlB,MAAMI,UAAU,GAAGd,MAAM,CAACM,GAAI;AAC9B;AACA;AACA;AACA,CAAC;AAACS,GAAA,GAJID,UAAU;AAMhB,MAAME,SAAS,GAAGhB,MAAM,CAACM,GAAI;AAC7B;AACA;AACA;AACA,sBAAsBK,KAAK,IAAIA,KAAK,CAACC,KAAM;AAC3C;AACA;AACA,CAAC;AAACK,GAAA,GAPID,SAAS;AASf,SAASE,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM;IAAE0B;EAAQ,CAAC,GAAGtB,SAAS,CAAC,CAAC;EAE/B,MAAMuB,oBAAoB,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,KAAK;IAC9D,MAAMC,MAAM,GAAG,MAAMC,WAAW,CAACH,UAAU,CAAC;IAC5C,MAAMI,KAAK,GAAGF,MAAM,CAACG,SAAS,CAAC,WAAW,CAAC,CAACC,OAAO,CAAC,WAAW,EAAE,oBAAoB,CAAC;IACtF,IAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACtCF,IAAI,CAACG,QAAQ,GAAI,GAAET,WAAY,MAAK;IACpCM,IAAI,CAACI,IAAI,GAAGP,KAAK;IACjBG,IAAI,CAACK,KAAK,CAAC,CAAC;EACd,CAAC;EAGDvC,SAAS,CAAC,MAAM;IACdwC,KAAK,CAAE,GAAEtC,QAAS,UAASuB,OAAQ,SAAQ,EAAE;MAC3CgB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,QAAQ,EAAE;MAAmB;IAC1C,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI;MACd,IAAIA,MAAM,CAACzB,MAAM,EAAE;QACjBC,SAAS,CAACwB,MAAM,CAACzB,MAAM,CAAC0B,GAAG,CAACC,SAAS,KAAK;UACxCC,GAAG,EAAED,SAAS,CAACE,UAAU,CAAC,GAAG,CAAC,GAAGF,SAAS,GAAI,IAAGA,SAAU;QAC7D,CAAC,CAAC,CAAC,CAAC;MACN;IACF,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;IAIjEZ,KAAK,CAAE,GAAEtC,QAAS,UAASuB,OAAQ,WAAU,EAAE;MAC3CgB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,QAAQ,EAAE;MAAmB;IAC1C,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI;MACdO,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;MACnB;MACA,MAAMS,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACX,MAAM,CAAC,CAACC,GAAG,CAAC,CAAC,CAACW,IAAI,EAAErC,MAAM,CAAC,MAAM;QACpEqC,IAAI;QACJrC,MAAM,EAAEA,MAAM,CAAC0B,GAAG,CAAClC,KAAK,IAAK,IAAGA,KAAM,EAAC,CAAC,CAAE;MAC5C,CAAC,CAAC,CAAC;MACHW,WAAW,CAAC+B,aAAa,CAAC;IAC5B,CAAC,CAAC,CACDJ,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAC;EAGvE,CAAC,EAAE,CAAC3B,OAAO,CAAC,CAAC;EAEb,oBACEpB,OAAA;IAAAsD,QAAA,gBACEtD,OAAA;MAAAsD,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACf1D,OAAA,CAACU,UAAU;MAAA4C,QAAA,EACRtC,MAAM,CAAC0B,GAAG,CAAC,CAAClC,KAAK,EAAEmD,KAAK,kBACvB3D,OAAA,CAACY,SAAS;QAAaJ,KAAK,EAAEA,KAAK,CAACoC,GAAI;QAAAU,QAAA,EACrC9C,KAAK,CAACoC;MAAG,GADIe,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC,eACb1D,OAAA;MAAAsD,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB1D,OAAA,CAACC,WAAW;MAAAqD,QAAA,EACTpC,QAAQ,CAACwB,GAAG,CAAEkB,OAAO,iBACpB5D,OAAA,CAACI,UAAU;QAAoByD,GAAG,EAAEC,EAAE,IAAI,IAAI,CAACF,OAAO,CAACP,IAAI,CAAC,GAAGS,EAAG;QAAAR,QAAA,gBAChEtD,OAAA;UAAAsD,QAAA,EAAKM,OAAO,CAACP;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACtBE,OAAO,CAAC5C,MAAM,CAAC0B,GAAG,CAAC,CAAClC,KAAK,EAAEmD,KAAK,kBAC/B3D,OAAA,CAACM,YAAY;UAAaE,KAAK,EAAEA;QAAM,GAApBmD,KAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiB,CAC1C,CAAC,eACF1D,OAAA;UAAQ+D,OAAO,EAAEA,CAAA,KAAM1C,oBAAoB,CAAC,IAAI,CAACuC,OAAO,CAACP,IAAI,CAAC,EAAEO,OAAO,CAACP,IAAI,CAAE;UAAAC,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GALrFE,OAAO,CAACP,IAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMjB,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAAC3C,EAAA,CAzEQD,cAAc;EAAA,QAGDhB,SAAS;AAAA;AAAAkE,GAAA,GAHtBlD,cAAc;AA2EvB,eAAeA,cAAc;AAAC,IAAAX,EAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAmD,GAAA;AAAAC,YAAA,CAAA9D,EAAA;AAAA8D,YAAA,CAAA5D,GAAA;AAAA4D,YAAA,CAAAxD,GAAA;AAAAwD,YAAA,CAAAtD,GAAA;AAAAsD,YAAA,CAAApD,GAAA;AAAAoD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}