{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/MyProfile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { BASE_URL } from '../constants';\nimport { useParams } from 'react-router-dom';\nimport html2canvas from 'html2canvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaletteGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  padding: 20px;\n`;\n_c = PaletteGrid;\nconst DownloadButton = styled.button`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  display: none;\n  padding: 5px 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: white;\n  cursor: pointer;\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\nconst PaletteBox = styled.div`\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: #f9f9f9;\n  &:hover {\n    background-color: #e9e9e9;\n    ${DownloadButton} {\n      display: block; /* This will show the button on hover */\n    }\n  }\n`;\n_c2 = PaletteBox;\nconst ColorPreview = styled.div`\n  height: 40px;\n  width: 100%;\n  background-color: ${props => props.color};\n`;\n_c3 = ColorPreview;\nconst ColorsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 10px;\n`;\n_c4 = ColorsGrid;\nconst ColorItem = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  background-color: ${props => props.color};\n  color: white;\n  text-align: center;\n`;\n_c5 = ColorItem;\nfunction MyProfile() {\n  _s();\n  const [colors, setColors] = useState([]);\n  const [palettes, setPalettes] = useState([]);\n  const {\n    user_id\n  } = useParams();\n  const paletteRefs = useRef({});\n  useEffect(() => {\n    fetch(`${BASE_URL}/users/${user_id}/colors`, {\n      method: 'GET',\n      headers: {\n        'accept': 'application/json'\n      }\n    }).then(response => response.json()).then(result => {\n      if (result.colors) {\n        setColors(result.colors.map(colorCode => ({\n          hex: colorCode.startsWith('#') ? colorCode : `#${colorCode}`\n        })));\n      }\n    }).catch(error => console.error('Error fetching colors:', error));\n    fetch(`${BASE_URL}/users/${user_id}/palettes`, {\n      method: 'GET',\n      headers: {\n        'accept': 'application/json'\n      }\n    }).then(response => response.json()).then(result => {\n      const palettesArray = Object.entries(result).map(([name, colors]) => ({\n        name,\n        colors: colors.map(color => `#${color}`)\n      }));\n      setPalettes(palettesArray);\n    }).catch(error => console.error('Error fetching palettes:', error));\n  }, [user_id]);\n  const downloadPaletteAsPNG = async paletteName => {\n    const paletteRef = paletteRefs.current[paletteName];\n    if (paletteRef) {\n      // Find the button inside the PaletteBox and hide it\n      const button = paletteRef.querySelector('button');\n      button.style.display = 'none';\n      const canvas = await html2canvas(paletteRef);\n      const image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n\n      // After capturing, show the button again\n      button.style.display = 'block';\n\n      // Use the created image for download\n      let link = document.createElement('a');\n      link.download = `${paletteName}.png`;\n      link.href = image;\n      link.click();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Colors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorsGrid, {\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(ColorItem, {\n        color: color.hex,\n        children: color.hex\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Palettes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaletteGrid, {\n      children: palettes.map(palette => /*#__PURE__*/_jsxDEV(PaletteBox, {\n        ref: el => paletteRefs.current[palette.name] = el,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: palette.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), palette.colors.map((color, index) => /*#__PURE__*/_jsxDEV(ColorPreview, {\n          color: color\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => downloadPaletteAsPNG(palette.name),\n          children: \"Download PNG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, palette.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(MyProfile, \"PMjQ73WgXcRGDJSb7AcoP5/7Xmo=\", false, function () {\n  return [useParams];\n});\n_c6 = MyProfile;\nexport default MyProfile;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PaletteGrid\");\n$RefreshReg$(_c2, \"PaletteBox\");\n$RefreshReg$(_c3, \"ColorPreview\");\n$RefreshReg$(_c4, \"ColorsGrid\");\n$RefreshReg$(_c5, \"ColorItem\");\n$RefreshReg$(_c6, \"MyProfile\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","BASE_URL","useParams","html2canvas","jsxDEV","_jsxDEV","PaletteGrid","div","_c","DownloadButton","button","PaletteBox","_c2","ColorPreview","props","color","_c3","ColorsGrid","_c4","ColorItem","_c5","MyProfile","_s","colors","setColors","palettes","setPalettes","user_id","paletteRefs","fetch","method","headers","then","response","json","result","map","colorCode","hex","startsWith","catch","error","console","palettesArray","Object","entries","name","downloadPaletteAsPNG","paletteName","paletteRef","current","querySelector","style","display","canvas","image","toDataURL","replace","link","document","createElement","download","href","click","children","fileName","_jsxFileName","lineNumber","columnNumber","index","palette","ref","el","onClick","_c6","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/MyProfile.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { BASE_URL } from '../constants';\nimport { useParams } from 'react-router-dom';\nimport html2canvas from 'html2canvas';\n\nconst PaletteGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  padding: 20px;\n`;\n\nconst DownloadButton = styled.button`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  display: none;\n  padding: 5px 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: white;\n  cursor: pointer;\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nconst PaletteBox = styled.div`\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: #f9f9f9;\n  &:hover {\n    background-color: #e9e9e9;\n    ${DownloadButton} {\n      display: block; /* This will show the button on hover */\n    }\n  }\n`;\n\n\nconst ColorPreview = styled.div`\n  height: 40px;\n  width: 100%;\n  background-color: ${props => props.color};\n`;\n\nconst ColorsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  gap: 10px;\n`;\n\nconst ColorItem = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  background-color: ${props => props.color};\n  color: white;\n  text-align: center;\n`;\n\nfunction MyProfile() {\n  const [colors, setColors] = useState([]);\n  const [palettes, setPalettes] = useState([]);\n  const { user_id } = useParams();\n  const paletteRefs = useRef({});\n\n  useEffect(() => {\n    fetch(`${BASE_URL}/users/${user_id}/colors`, {\n      method: 'GET',\n      headers: { 'accept': 'application/json' },\n    }).then(response => response.json())\n      .then(result => {\n        if (result.colors) {\n          setColors(result.colors.map(colorCode => ({\n            hex: colorCode.startsWith('#') ? colorCode : `#${colorCode}`\n          })));\n        }\n      })\n      .catch(error => console.error('Error fetching colors:', error));\n\n    fetch(`${BASE_URL}/users/${user_id}/palettes`, {\n      method: 'GET',\n      headers: { 'accept': 'application/json' },\n    }).then(response => response.json())\n      .then(result => {\n        const palettesArray = Object.entries(result).map(([name, colors]) => ({\n          name,\n          colors: colors.map(color => `#${color}`)  \n        }));\n        setPalettes(palettesArray);\n      })\n      .catch(error => console.error('Error fetching palettes:', error));\n  }, [user_id]);\n\n  const downloadPaletteAsPNG = async (paletteName) => {\n    const paletteRef = paletteRefs.current[paletteName];\n    if (paletteRef) {\n        // Find the button inside the PaletteBox and hide it\n        const button = paletteRef.querySelector('button');\n        button.style.display = 'none';\n        \n        const canvas = await html2canvas(paletteRef);\n        const image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        \n        // After capturing, show the button again\n        button.style.display = 'block';\n\n        // Use the created image for download\n        let link = document.createElement('a');\n        link.download = `${paletteName}.png`;\n        link.href = image;\n        link.click();\n    }\n};\n\n  return (\n    <div>\n      <h1>Colors</h1>\n      <ColorsGrid>\n        {colors.map((color, index) => (\n          <ColorItem key={index} color={color.hex}>\n            {color.hex}\n          </ColorItem>\n        ))}\n      </ColorsGrid>\n      <h1>Palettes</h1>\n      <PaletteGrid>\n        {palettes.map((palette) => (\n          <PaletteBox key={palette.name} ref={el => paletteRefs.current[palette.name] = el}>\n            <h3>{palette.name}</h3>\n            {palette.colors.map((color, index) => (\n              <ColorPreview key={index} color={color} />\n            ))}\n            <button onClick={() => downloadPaletteAsPNG(palette.name)}>Download PNG</button>\n          </PaletteBox>\n        ))}\n      </PaletteGrid>\n    </div>\n  );\n}\n\nexport default MyProfile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}