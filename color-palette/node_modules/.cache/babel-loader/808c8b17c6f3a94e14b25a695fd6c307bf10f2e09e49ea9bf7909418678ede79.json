{"ast":null,"code":"// api.js\nconst BASE_URL = 'http://localhost:8000'; // Define the base URL only once\n\nexport const apiRequest = async (endpoint, method, data, isJson = true) => {\n  const url = `${BASE_URL}${endpoint}`;\n  let headers = {};\n  let body;\n\n  // Check if the request should be sent as JSON or Form-URL-Encoded\n  if (isJson) {\n    headers['Content-Type'] = 'application/json';\n    body = JSON.stringify(data);\n  } else {\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    body = Object.keys(data).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key])).join('&');\n  }\n  const options = {\n    method: method,\n    headers: headers,\n    body: method !== 'GET' ? body : null // body should not be used with GET requests\n  };\n  try {\n    const response = await fetch(url, options);\n    const jsonData = await response.json();\n    if (response.ok) {\n      return jsonData;\n    } else {\n      throw new Error(jsonData.error || 'Server responded with an error');\n    }\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","apiRequest","endpoint","method","data","isJson","url","headers","body","JSON","stringify","Object","keys","map","key","encodeURIComponent","join","options","response","fetch","jsonData","json","ok","Error","error"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/api.js"],"sourcesContent":["// api.js\nconst BASE_URL = 'http://localhost:8000'; // Define the base URL only once\n\nexport const apiRequest = async (endpoint, method, data, isJson = true) => {\n    const url = `${BASE_URL}${endpoint}`;\n    let headers = {};\n    let body;\n\n    // Check if the request should be sent as JSON or Form-URL-Encoded\n    if (isJson) {\n        headers['Content-Type'] = 'application/json';\n        body = JSON.stringify(data);\n    } else {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        body = Object.keys(data).map(\n            key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key])\n        ).join('&');\n    }\n\n    const options = {\n        method: method,\n        headers: headers,\n        body: method !== 'GET' ? body : null, // body should not be used with GET requests\n    };\n\n    try {\n        const response = await fetch(url, options);\n        const jsonData = await response.json();\n\n        if (response.ok) {\n            return jsonData;\n        } else {\n            throw new Error(jsonData.error || 'Server responded with an error');\n        }\n    } catch (error) {\n        throw error;\n    }\n};\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEC,MAAM,GAAG,IAAI,KAAK;EACvE,MAAMC,GAAG,GAAI,GAAEN,QAAS,GAAEE,QAAS,EAAC;EACpC,IAAIK,OAAO,GAAG,CAAC,CAAC;EAChB,IAAIC,IAAI;;EAER;EACA,IAAIH,MAAM,EAAE;IACRE,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IAC5CC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;EAC/B,CAAC,MAAM;IACHG,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC;IAC7DC,IAAI,GAAGG,MAAM,CAACC,IAAI,CAACR,IAAI,CAAC,CAACS,GAAG,CACxBC,GAAG,IAAIC,kBAAkB,CAACD,GAAG,CAAC,GAAG,GAAG,GAAGC,kBAAkB,CAACX,IAAI,CAACU,GAAG,CAAC,CACvE,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;EACf;EAEA,MAAMC,OAAO,GAAG;IACZd,MAAM,EAAEA,MAAM;IACdI,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAEL,MAAM,KAAK,KAAK,GAAGK,IAAI,GAAG,IAAI,CAAE;EAC1C,CAAC;EAED,IAAI;IACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAEW,OAAO,CAAC;IAC1C,MAAMG,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAEtC,IAAIH,QAAQ,CAACI,EAAE,EAAE;MACb,OAAOF,QAAQ;IACnB,CAAC,MAAM;MACH,MAAM,IAAIG,KAAK,CAACH,QAAQ,CAACI,KAAK,IAAI,gCAAgC,CAAC;IACvE;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZ,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}