{"ast":null,"code":"const BASE_URL = 'http://localhost:8000'; // Define the base URL only once\n\nexport const apiRequest = async (endpoint, method, queryParams, bodyData, authRequired = false) => {\n  // Construct the query string from queryParams object\n  const queryString = new URLSearchParams(queryParams).toString();\n\n  // Append the query string to the endpoint\n  const urlWithParams = `${endpoint}?${queryString}`;\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  try {\n    const response = await fetch(urlWithParams, {\n      method: method,\n      headers: headers,\n      body: JSON.stringify(bodyData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error making API request:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","apiRequest","endpoint","method","queryParams","bodyData","authRequired","queryString","URLSearchParams","toString","urlWithParams","headers","response","fetch","body","JSON","stringify","ok","Error","status","json","error","console"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8000'; // Define the base URL only once\n\nexport const apiRequest = async (endpoint, method, queryParams, bodyData, authRequired = false) => {\n    // Construct the query string from queryParams object\n    const queryString = new URLSearchParams(queryParams).toString();\n\n    // Append the query string to the endpoint\n    const urlWithParams = `${endpoint}?${queryString}`;\n\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n\n    try {\n        const response = await fetch(urlWithParams, {\n            method: method,\n            headers: headers,\n            body: JSON.stringify(bodyData),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error making API request:\", error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,YAAY,GAAG,KAAK,KAAK;EAC/F;EACA,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACJ,WAAW,CAAC,CAACK,QAAQ,CAAC,CAAC;;EAE/D;EACA,MAAMC,aAAa,GAAI,GAAER,QAAS,IAAGK,WAAY,EAAC;EAElD,MAAMI,OAAO,GAAG;IACZ,cAAc,EAAE;EACpB,CAAC;EAED,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,EAAE;MACxCP,MAAM,EAAEA,MAAM;MACdQ,OAAO,EAAEA,OAAO;MAChBG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ;IACjC,CAAC,CAAC;IAEF,IAAI,CAACO,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBN,QAAQ,CAACO,MAAO,EAAC,CAAC;IAC7D;IAEA,OAAO,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}