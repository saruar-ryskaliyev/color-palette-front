{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../MyColors.css';\nimport { EditMyColors } from './EditMyColors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyColors() {\n  _s();\n  let existingColors = JSON.parse(localStorage.getItem('colors')) || [];\n  console.log(existingColors);\n  const [colors, setColors] = useState(() => {\n    const storedColors = localStorage.getItem('colors');\n    return storedColors ? JSON.parse(storedColors) : [];\n  });\n  const copyToClipboard = hex => {\n    navigator.clipboard.writeText(hex).then(() => {\n      alert(`Copied ${hex} to clipboard`);\n    }).catch(err => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  const removeColor = indexToRemove => {\n    const newColors = colors.filter((_, index) => index !== indexToRemove);\n    localStorage.setItem('colors', JSON.stringify(newColors));\n    setColors(newColors);\n  };\n  const editColor = color => {\n    setEditingColor(color); // Store the hex value of the color being edited\n    setIsOpen(true); // Open the modal\n  };\n  const [editingColor, setEditingColor] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myColorsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Colors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"colorsGrid\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colorItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"colorSquare\",\n          style: {\n            backgroundColor: color.hex\n          },\n          onClick: () => copyToClipboard(color.hex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"colorHex\",\n          children: color.hex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editIcon\",\n          onClick: () => editColor(color),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(EditMyColors, {\n          isOpen: isOpen,\n          onClose: () => setIsOpen(false),\n          initialColor: editingColor ? editingColor.hex : '#FFFFFF'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deleteIcon\",\n          onClick: () => removeColor(index),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(MyColors, \"wFnLF0GSwGLEgv1JK4GiWPdJLPg=\");\n_c = MyColors;\nexport default MyColors;\nvar _c;\n$RefreshReg$(_c, \"MyColors\");","map":{"version":3,"names":["React","useState","EditMyColors","jsxDEV","_jsxDEV","MyColors","_s","existingColors","JSON","parse","localStorage","getItem","console","log","colors","setColors","storedColors","copyToClipboard","hex","navigator","clipboard","writeText","then","alert","catch","err","error","removeColor","indexToRemove","newColors","filter","_","index","setItem","stringify","editColor","color","setEditingColor","setIsOpen","editingColor","isOpen","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","backgroundColor","onClick","onClose","initialColor","_c","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../MyColors.css';\nimport { EditMyColors } from './EditMyColors';\n\n\nfunction MyColors() {\n\n\n    let existingColors = JSON.parse(localStorage.getItem('colors')) || [];\n    console.log(existingColors);\n\n    const [colors, setColors] = useState(() => {\n        const storedColors = localStorage.getItem('colors');\n        return storedColors ? JSON.parse(storedColors) : [];\n    });\n\n    const copyToClipboard = (hex) => {\n        navigator.clipboard.writeText(hex).then(() => {\n            alert(`Copied ${hex} to clipboard`); \n        }).catch(err => {\n            console.error('Could not copy text: ', err);\n        });\n    };\n\n    const removeColor = (indexToRemove) => {\n        const newColors = colors.filter((_, index) => index !== indexToRemove);\n        localStorage.setItem('colors', JSON.stringify(newColors));\n        setColors(newColors);\n    };\n\n    const editColor = (color) => {\n        setEditingColor(color); // Store the hex value of the color being edited\n        setIsOpen(true); // Open the modal\n    };\n\n    const [editingColor, setEditingColor] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n\n\n    return (\n        <div className=\"myColorsContainer\">\n            <h1>My Colors</h1>\n            <div className=\"colorsGrid\">\n                {colors.map((color, index) => (\n                    <div key={index} className=\"colorItem\">\n                        <div\n                            className=\"colorSquare\"\n                            style={{ backgroundColor: color.hex }}\n                            onClick={() => copyToClipboard(color.hex)}\n                        ></div>\n                        <div className=\"colorHex\">{color.hex}</div>\n\n                        <div className=\"editIcon\" onClick={() => editColor(color)}> </div>\n\n\n                        <EditMyColors\n                            isOpen={isOpen}\n                            onClose={() => setIsOpen(false)}\n                            initialColor={editingColor ? editingColor.hex : '#FFFFFF'} \n                        />\n\n                        <div className=\"deleteIcon\" onClick={() => removeColor(index)}>\n                            &times;\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MyColors;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}