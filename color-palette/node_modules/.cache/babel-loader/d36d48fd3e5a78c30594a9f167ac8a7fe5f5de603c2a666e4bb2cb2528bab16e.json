{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { findNodeHandle } from 'react-native';\nimport PointerEventManager from './PointerEventManager';\nimport TouchEventManager from './TouchEventManager';\nimport { State } from '../../State';\nimport { isPointerInBounds } from '../utils';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nexport class GestureHandlerWebDelegate {\n  constructor() {\n    _defineProperty(this, \"view\", void 0);\n    _defineProperty(this, \"gestureHandler\", void 0);\n    _defineProperty(this, \"eventManagers\", []);\n  }\n  getView() {\n    return this.view;\n  }\n  init(viewRef, handler) {\n    var _config$touchAction;\n    if (!viewRef) {\n      throw new Error(`Cannot find HTML Element for handler ${handler.getTag()}`);\n    }\n    this.gestureHandler = handler;\n    this.view = findNodeHandle(viewRef);\n    const config = handler.getConfig();\n    this.addContextMenuListeners(config);\n    if (!config.userSelect) {\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n    } else {\n      this.view.style['webkitUserSelect'] = config.userSelect;\n      this.view.style['userSelect'] = config.userSelect;\n    }\n    this.view.style['touchAction'] = (_config$touchAction = config.touchAction) !== null && _config$touchAction !== void 0 ? _config$touchAction : 'none'; //@ts-ignore This one disables default events on Safari\n\n    this.view.style['WebkitTouchCallout'] = 'none';\n    this.eventManagers.push(new PointerEventManager(this.view));\n    this.eventManagers.push(new TouchEventManager(this.view));\n    this.eventManagers.forEach(manager => this.gestureHandler.attachEventManager(manager));\n  }\n  isPointerInBounds({\n    x,\n    y\n  }) {\n    return isPointerInBounds(this.view, {\n      x,\n      y\n    });\n  }\n  measureView() {\n    const rect = this.view.getBoundingClientRect();\n    return {\n      pageX: rect.left,\n      pageY: rect.top,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n  reset() {\n    this.eventManagers.forEach(manager => manager.resetManager());\n  }\n  tryResetCursor() {\n    const config = this.gestureHandler.getConfig();\n    if (config.activeCursor && config.activeCursor !== 'auto' && this.gestureHandler.getState() === State.ACTIVE) {\n      this.view.style.cursor = 'auto';\n    }\n  }\n  shouldDisableContextMenu(config) {\n    return config.enableContextMenu === undefined && this.gestureHandler.isButtonInConfig(MouseButton.RIGHT) || config.enableContextMenu === false;\n  }\n  addContextMenuListeners(config) {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.addEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.addEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n  removeContextMenuListeners(config) {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.removeEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.removeEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n  disableContextMenu(e) {\n    e.preventDefault();\n  }\n  enableContextMenu(e) {\n    e.stopPropagation();\n  }\n  onBegin() {// no-op for now\n  }\n  onActivate() {\n    const config = this.gestureHandler.getConfig();\n    if ((!this.view.style.cursor || this.view.style.cursor === 'auto') && config.activeCursor) {\n      this.view.style.cursor = config.activeCursor;\n    }\n  }\n  onEnd() {\n    this.tryResetCursor();\n  }\n  onCancel() {\n    this.tryResetCursor();\n  }\n  onFail() {\n    this.tryResetCursor();\n  }\n  destroy(config) {\n    this.removeContextMenuListeners(config);\n    this.eventManagers.forEach(manager => {\n      manager.unregisterListeners();\n    });\n  }\n}","map":{"version":3,"names":["findNodeHandle","PointerEventManager","TouchEventManager","State","isPointerInBounds","MouseButton","GestureHandlerWebDelegate","constructor","_defineProperty","getView","view","init","viewRef","handler","_config$touchAction","Error","getTag","gestureHandler","config","getConfig","addContextMenuListeners","userSelect","style","touchAction","eventManagers","push","forEach","manager","attachEventManager","x","y","measureView","rect","getBoundingClientRect","pageX","left","pageY","top","width","height","reset","resetManager","tryResetCursor","activeCursor","getState","ACTIVE","cursor","shouldDisableContextMenu","enableContextMenu","undefined","isButtonInConfig","RIGHT","addEventListener","disableContextMenu","removeContextMenuListeners","removeEventListener","e","preventDefault","stopPropagation","onBegin","onActivate","onEnd","onCancel","onFail","destroy","unregisterListeners"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/web/tools/GestureHandlerWebDelegate.ts"],"sourcesContent":["import { findNodeHandle } from 'react-native';\nimport type IGestureHandler from '../handlers/IGestureHandler';\nimport {\n  GestureHandlerDelegate,\n  MeasureResult,\n} from './GestureHandlerDelegate';\nimport PointerEventManager from './PointerEventManager';\nimport TouchEventManager from './TouchEventManager';\nimport { State } from '../../State';\nimport { isPointerInBounds } from '../utils';\nimport EventManager from './EventManager';\nimport { Config } from '../interfaces';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\n\nexport class GestureHandlerWebDelegate\n  implements GestureHandlerDelegate<HTMLElement, IGestureHandler>\n{\n  private view!: HTMLElement;\n  private gestureHandler!: IGestureHandler;\n  private eventManagers: EventManager<unknown>[] = [];\n\n  getView(): HTMLElement {\n    return this.view;\n  }\n\n  init(viewRef: number, handler: IGestureHandler): void {\n    if (!viewRef) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${handler.getTag()}`\n      );\n    }\n\n    this.gestureHandler = handler;\n    this.view = findNodeHandle(viewRef) as unknown as HTMLElement;\n\n    const config = handler.getConfig();\n\n    this.addContextMenuListeners(config);\n\n    if (!config.userSelect) {\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n    } else {\n      this.view.style['webkitUserSelect'] = config.userSelect;\n      this.view.style['userSelect'] = config.userSelect;\n    }\n\n    this.view.style['touchAction'] = config.touchAction ?? 'none';\n    //@ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = 'none';\n\n    this.eventManagers.push(new PointerEventManager(this.view));\n    this.eventManagers.push(new TouchEventManager(this.view));\n\n    this.eventManagers.forEach((manager) =>\n      this.gestureHandler.attachEventManager(manager)\n    );\n  }\n\n  isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    return isPointerInBounds(this.view, { x, y });\n  }\n\n  measureView(): MeasureResult {\n    const rect = this.view.getBoundingClientRect();\n\n    return {\n      pageX: rect.left,\n      pageY: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n  }\n\n  reset(): void {\n    this.eventManagers.forEach((manager: EventManager<unknown>) =>\n      manager.resetManager()\n    );\n  }\n\n  tryResetCursor() {\n    const config = this.gestureHandler.getConfig();\n\n    if (\n      config.activeCursor &&\n      config.activeCursor !== 'auto' &&\n      this.gestureHandler.getState() === State.ACTIVE\n    ) {\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  private shouldDisableContextMenu(config: Config) {\n    return (\n      (config.enableContextMenu === undefined &&\n        this.gestureHandler.isButtonInConfig(MouseButton.RIGHT)) ||\n      config.enableContextMenu === false\n    );\n  }\n\n  private addContextMenuListeners(config: Config): void {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.addEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.addEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n\n  private removeContextMenuListeners(config: Config): void {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.removeEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.removeEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n\n  private disableContextMenu(this: void, e: MouseEvent): void {\n    e.preventDefault();\n  }\n\n  private enableContextMenu(this: void, e: MouseEvent): void {\n    e.stopPropagation();\n  }\n\n  onBegin(): void {\n    // no-op for now\n  }\n\n  onActivate(): void {\n    const config = this.gestureHandler.getConfig();\n\n    if (\n      (!this.view.style.cursor || this.view.style.cursor === 'auto') &&\n      config.activeCursor\n    ) {\n      this.view.style.cursor = config.activeCursor;\n    }\n  }\n\n  onEnd(): void {\n    this.tryResetCursor();\n  }\n\n  onCancel(): void {\n    this.tryResetCursor();\n  }\n\n  onFail(): void {\n    this.tryResetCursor();\n  }\n\n  public destroy(config: Config): void {\n    this.removeContextMenuListeners(config);\n\n    this.eventManagers.forEach((manager) => {\n      manager.unregisterListeners();\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}