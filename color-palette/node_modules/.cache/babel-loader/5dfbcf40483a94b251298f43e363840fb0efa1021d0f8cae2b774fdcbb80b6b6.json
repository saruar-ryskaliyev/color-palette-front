{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../MyColors.css';\nimport { EditMyColors } from './EditMyColors';\nimport { apiRequest } from './api';\nimport { BASE_URL } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyColors() {\n  _s();\n  const [colors, setColors] = useState(() => {\n    const storedColors = localStorage.getItem('colors');\n    return storedColors ? JSON.parse(storedColors) : [];\n  });\n  const [editingColor, setEditingColor] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    fetchColors();\n  }, []);\n  const fetchColors = async () => {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    const user_id = userData.userId;\n    try {\n      const response = await fetch(`${BASE_URL}/users/${user_id}/colors`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json'\n        }\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setColors(result.colors.map(colorCode => {\n          const hex = colorCode.startsWith('#') ? colorCode : `#${colorCode}`;\n          return {\n            hex\n          };\n        }));\n      } else {\n        console.error('Error fetching colors:', result.error);\n      }\n    } catch (error) {\n      console.error('Error fetching colors:', error);\n    }\n  };\n  const copyToClipboard = hex => {\n    navigator.clipboard.writeText(hex).then(() => {\n      alert(`Copied ${hex} to clipboard`);\n    }).catch(err => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  const handleColorUpdate = async (newColor, index) => {\n    let updatedColors = [...colors];\n    if (index !== -1) {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n      const user_id = userData.userId;\n      const token = userData.token;\n      const colorHex = colors[index].hex.replace('#', '');\n      updatedColors[index] = {\n        hex: newColor\n      };\n      console.log('Updated colors:', updatedColors);\n      try {\n        const response = await fetch(`${BASE_URL}/users/${user_id}/colors/${colorHex}/${updatedColors[index].hex.replace}`, {\n          method: 'PUT',\n          headers: {\n            'accept': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            color: newColor.replace('#', '')\n          })\n        });\n        const result = await response.json();\n        if (response.ok) {\n          setColors(updatedColors);\n          localStorage.setItem('colors', JSON.stringify(updatedColors));\n          console.log('Color updated:', updatedColors);\n        } else {\n          console.error('Error updating color:', result.error);\n        }\n      } catch (error) {\n        console.error('Error updating color:', error);\n      }\n    }\n  };\n  const removeColor = async indexToRemove => {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    const user_id = userData.userId;\n    const color = colors[indexToRemove];\n    const token = userData.token;\n    const colorHex = colors[indexToRemove].hex.replace('#', '');\n    try {\n      const response = await fetch(`${BASE_URL}/users/${user_id}/colors/${colorHex}`, {\n        method: 'DELETE',\n        headers: {\n          'accept': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const result = await response.json();\n      if (response.ok) {\n        const updatedColors = colors.filter((_, index) => index !== indexToRemove);\n        setColors(updatedColors);\n        localStorage.setItem('colors', JSON.stringify(updatedColors));\n      } else {\n        console.error('Error deleting color:', result.error);\n      }\n    } catch (error) {\n      console.error('Error deleting color:', error);\n    }\n  };\n  const editColor = color => {\n    setEditingColor(color); // Store the hex value of the color being edited\n    setIsOpen(true); // Open the modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myColorsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Colors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"colorsGrid\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colorItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"colorSquare\",\n          style: {\n            backgroundColor: color.hex\n          },\n          onClick: () => copyToClipboard(color.hex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"colorHex\",\n          children: color.hex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editIcon\",\n          onClick: () => editColor(color),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(EditMyColors, {\n          isOpen: isOpen,\n          onClose: () => setIsOpen(false),\n          initialColor: editingColor ? editingColor.hex : '#FFFFFF',\n          onColorUpdate: newColor => handleColorUpdate(newColor, colors.indexOf(editingColor))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deleteIcon\",\n          onClick: () => removeColor(index),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n_s(MyColors, \"wsoUOjPFBif3NOUwvokeVedNN7Y=\");\n_c = MyColors;\nexport default MyColors;\nvar _c;\n$RefreshReg$(_c, \"MyColors\");","map":{"version":3,"names":["React","useState","useEffect","EditMyColors","apiRequest","BASE_URL","jsxDEV","_jsxDEV","MyColors","_s","colors","setColors","storedColors","localStorage","getItem","JSON","parse","editingColor","setEditingColor","isOpen","setIsOpen","fetchColors","userData","user_id","userId","response","fetch","method","headers","result","json","ok","map","colorCode","hex","startsWith","console","error","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","err","handleColorUpdate","newColor","index","updatedColors","token","colorHex","replace","log","body","stringify","color","setItem","removeColor","indexToRemove","filter","_","editColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","onClick","onClose","initialColor","onColorUpdate","indexOf","_c","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../MyColors.css';\nimport { EditMyColors } from './EditMyColors';\nimport { apiRequest } from './api';\nimport { BASE_URL } from '../constants';\n\n\nfunction MyColors() {\n\n\n\n    const [colors, setColors] = useState(() => {\n        const storedColors = localStorage.getItem('colors');\n        return storedColors ? JSON.parse(storedColors) : [];\n    });\n\n\n\n    const [editingColor, setEditingColor] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        \n        fetchColors();\n    }, []);\n\n\n\n    const fetchColors = async () => {\n\n\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        const user_id = userData.userId;\n    \n        try {\n            const response = await fetch(`${BASE_URL}/users/${user_id}/colors`, {\n                method: 'GET',\n                headers: {\n                    'accept': 'application/json'},\n            });\n\n            const result = await response.json();\n\n            if (response.ok) {\n                setColors(result.colors.map(colorCode => {\n                    const hex = colorCode.startsWith('#') ? colorCode : `#${colorCode}`;\n                    return { hex };\n                }));\n            } else {\n                console.error('Error fetching colors:', result.error);\n            }\n\n        } catch (error) {\n            console.error('Error fetching colors:', error);\n        }\n    };\n    \n\n\n\n    const copyToClipboard = (hex) => {\n        navigator.clipboard.writeText(hex).then(() => {\n            alert(`Copied ${hex} to clipboard`); \n        }).catch(err => {\n            console.error('Could not copy text: ', err);\n        });\n    };\n\n    const handleColorUpdate = async(newColor, index) => {\n\n        let updatedColors = [...colors];\n        if (index !== -1) {\n\n            const userData = JSON.parse(localStorage.getItem('userData'));\n            const user_id = userData.userId;\n            const token = userData.token;\n            const colorHex = colors[index].hex.replace('#', '');\n\n\n\n            updatedColors[index] = { hex: newColor };\n\n            console.log('Updated colors:', updatedColors)\n\n            try {\n                const response = await fetch(`${BASE_URL}/users/${user_id}/colors/${colorHex}/${updatedColors[index].hex.replace}`, {\n                    method: 'PUT',\n                    headers: {\n                        'accept': 'application/json',\n                        'Authorization': `Bearer ${token}`,\n                        'Content-Type': 'application/json'},\n                    body: JSON.stringify({ color: newColor.replace('#', '')}),\n                });\n\n                const result = await response.json();\n                if (response.ok) {\n\n\n\n                    setColors(updatedColors);\n                    localStorage.setItem('colors', JSON.stringify(updatedColors));\n\n                    console.log('Color updated:', updatedColors)\n\n\n                }\n                else {\n                    console.error('Error updating color:', result.error);\n                }\n            } catch (error) {\n                console.error('Error updating color:', error);\n            }\n\n\n            \n        }\n    };\n\n    const removeColor = async(indexToRemove) => {\n\n\n        const userData = JSON.parse(localStorage.getItem('userData'));\n\n        const user_id = userData.userId;\n        const color = colors[indexToRemove];\n        const token = userData.token;\n\n        const colorHex = colors[indexToRemove].hex.replace('#', '');\n\n\n\n        try {\n            const response = await fetch(`${BASE_URL}/users/${user_id}/colors/${colorHex}`, {\n                method: 'DELETE',\n                headers: {\n                    'accept': 'application/json',\n                    'Authorization': `Bearer ${token}`},\n            });\n\n\n            const result = await response.json();\n            if (response.ok) {\n\n\n                const updatedColors = colors.filter((_, index) => index !== indexToRemove);\n                setColors(updatedColors);\n                localStorage.setItem('colors', JSON.stringify(updatedColors));\n\n\n            }\n            else {\n                console.error('Error deleting color:', result.error);\n            }\n        } catch (error) {\n            console.error('Error deleting color:', error);\n        }\n\n\n    };\n\n    const editColor = (color) => {\n        setEditingColor(color); // Store the hex value of the color being edited\n        setIsOpen(true); // Open the modal\n    };\n\n\n\n    return (\n        <div className=\"myColorsContainer\">\n            <h1>My Colors</h1>\n            <div className=\"colorsGrid\">\n                {colors.map((color, index) => (\n                    <div key={index} className=\"colorItem\">\n                        <div\n                            className=\"colorSquare\"\n                            style={{ backgroundColor: color.hex }}\n                            onClick={() => copyToClipboard(color.hex)}\n                        ></div>\n                        <div className=\"colorHex\">{color.hex}</div>\n\n                        <div className=\"editIcon\" onClick={() => editColor(color)}> </div>\n\n\n                        <EditMyColors\n                            isOpen={isOpen}\n                            onClose={() => setIsOpen(false)}\n                            initialColor={editingColor ? editingColor.hex : '#FFFFFF'} \n                            onColorUpdate={(newColor) => handleColorUpdate(newColor, colors.indexOf(editingColor))}\n                        />\n\n                        <div className=\"deleteIcon\" onClick={() => removeColor(index)}>\n                            &times;\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MyColors;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}