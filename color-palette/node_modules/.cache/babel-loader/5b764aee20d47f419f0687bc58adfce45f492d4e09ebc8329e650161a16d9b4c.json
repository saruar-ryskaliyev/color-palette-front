{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\nclass TapGestureHandler extends DiscreteGestureHandler {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"_shouldFireEndEvent\", null);\n    _defineProperty(this, \"_timer\", void 0);\n    _defineProperty(this, \"_multiTapTimer\", void 0);\n    _defineProperty(this, \"onSuccessfulTap\", ev => {\n      if (this._getPendingGestures().length) {\n        this._shouldFireEndEvent = ev;\n        return;\n      }\n      if (ev.eventType === Hammer.INPUT_END) {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_MOVE\n        });\n      } // When handler gets activated it will turn into State.END immediately.\n\n      this.sendEvent({\n        ...ev,\n        isFinal: true\n      });\n      this.onGestureEnded(ev);\n    });\n  }\n\n  // TODO unused?\n  get name() {\n    return 'tap';\n  }\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n  onRawEvent(ev) {\n    super.onRawEvent(ev); // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n\n    if (!this.hasGestureFailed && !this.isGestureRunning &&\n    // Prevent multi-pointer events from misfiring.\n    !ev.isFinal) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n    if (this.hasGestureFailed) {\n      return;\n    } // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      } // Clear last timer\n\n      clearTimeout(this._timer); // Create time out for multi-taps.\n\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n      // @ts-ignore TODO(TS) trace down config\n      isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 :\n      // @ts-ignore TODO(TS) trace down config\n      this.config.maxDurationMs\n    };\n  }\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props\n    });\n  }\n  onGestureEnded(...props) {\n    clearTimeout(this._timer); // @ts-ignore TODO(TS) check how onGestureEnded works\n\n    super.onGestureEnded(...props);\n  }\n  onWaitingEnded(_gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;","map":{"version":3,"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","constructor","args","_defineProperty","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","name","NativeGestureClass","Tap","maxDelayMs","config","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","onSuccessfulTap","onRawEvent","hasGestureFailed","gesture","hammer","get","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","onWaitingEnded","_gesture"],"sources":["/Users/saruar/Desktop/color palette/color-palette/node_modules/react-native-gesture-handler/lib/module/web_hammer/TapGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}