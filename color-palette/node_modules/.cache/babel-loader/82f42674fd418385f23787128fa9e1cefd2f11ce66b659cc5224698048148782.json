{"ast":null,"code":"var _jsxFileName = \"/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../MyColors.css';\nimport { EditMyColors } from './EditMyColors';\nimport { apiRequest } from './api';\nimport { BASE_URL } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyColors() {\n  _s();\n  const [colors, setColors] = useState(() => {\n    const storedColors = localStorage.getItem('colors');\n    return storedColors ? JSON.parse(storedColors) : [];\n  });\n  const [editingColor, setEditingColor] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    fetchColors();\n  }, []);\n  const fetchColors = async () => {\n    console.log('Fetching colors...');\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    const user_id = userData.userId;\n    try {\n      const response = await fetch(`${BASE_URL}/users/${user_id}/colors`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json'\n        }\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setColors(result.colors);\n      } else {\n        console.error('Error fetching colors:', result.error);\n      }\n    } catch (error) {\n      console.error('Error fetching colors:', error);\n    }\n  };\n  const copyToClipboard = hex => {\n    navigator.clipboard.writeText(hex).then(() => {\n      alert(`Copied ${hex} to clipboard`);\n    }).catch(err => {\n      console.error('Could not copy text: ', err);\n    });\n  };\n  const handleColorUpdate = (newColor, index) => {\n    let updatedColors = [...colors];\n    if (index !== -1) {\n      updatedColors[index] = {\n        ...updatedColors[index],\n        hex: newColor\n      };\n      setColors(updatedColors);\n      localStorage.setItem('colors', JSON.stringify(updatedColors));\n    }\n  };\n  const removeColor = async indexToRemove => {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    const user_id = userData.userId;\n    const token = userData.token;\n    const color = colors[indexToRemove];\n    const queryParams = new URLSearchParams({\n      user_id,\n      color: color.hex,\n      token\n    });\n    const endpoint = `/users/${user_id}/colors?${queryParams}`;\n    try {\n      const response = await apiRequest(endpoint, 'DELETE');\n      console.log('response:', response);\n      if (response) {\n        console.log('Color removed:', color.hex);\n        const newColors = colors.filter((_, index) => index !== indexToRemove);\n        localStorage.setItem('colors', JSON.stringify(newColors));\n        setColors(newColors);\n      }\n    } catch (error) {\n      console.error('Error adding color:', error);\n    }\n  };\n  const editColor = color => {\n    setEditingColor(color); // Store the hex value of the color being edited\n    setIsOpen(true); // Open the modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myColorsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Colors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"colorsGrid\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colorItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"colorSquare\",\n          style: {\n            backgroundColor: color.hex\n          },\n          onClick: () => copyToClipboard(color.hex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"colorHex\",\n          children: color.hex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editIcon\",\n          onClick: () => editColor(color),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(EditMyColors, {\n          isOpen: isOpen,\n          onClose: () => setIsOpen(false),\n          initialColor: editingColor ? editingColor.hex : '#FFFFFF',\n          onColorUpdate: newColor => handleColorUpdate(newColor, colors.indexOf(editingColor))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deleteIcon\",\n          onClick: () => removeColor(index),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(MyColors, \"wsoUOjPFBif3NOUwvokeVedNN7Y=\");\n_c = MyColors;\nexport default MyColors;\nvar _c;\n$RefreshReg$(_c, \"MyColors\");","map":{"version":3,"names":["React","useState","useEffect","EditMyColors","apiRequest","BASE_URL","jsxDEV","_jsxDEV","MyColors","_s","colors","setColors","storedColors","localStorage","getItem","JSON","parse","editingColor","setEditingColor","isOpen","setIsOpen","fetchColors","console","log","userData","user_id","userId","response","fetch","method","headers","result","json","ok","error","copyToClipboard","hex","navigator","clipboard","writeText","then","alert","catch","err","handleColorUpdate","newColor","index","updatedColors","setItem","stringify","removeColor","indexToRemove","token","color","queryParams","URLSearchParams","endpoint","newColors","filter","_","editColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","backgroundColor","onClick","onClose","initialColor","onColorUpdate","indexOf","_c","$RefreshReg$"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/MyColors.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../MyColors.css';\nimport { EditMyColors } from './EditMyColors';\nimport { apiRequest } from './api';\nimport { BASE_URL } from '../constants';\n\n\nfunction MyColors() {\n\n\n    const [colors, setColors] = useState(() => {\n        const storedColors = localStorage.getItem('colors');\n        return storedColors ? JSON.parse(storedColors) : [];\n    });\n\n    const [editingColor, setEditingColor] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        \n        fetchColors();\n    }, []);\n\n\n\n    const fetchColors = async () => {\n\n        console.log('Fetching colors...');\n\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        const user_id = userData.userId;\n    \n        try {\n            const response = await fetch(`${BASE_URL}/users/${user_id}/colors`, {\n                method: 'GET',\n                headers: {\n                    'accept': 'application/json'},\n            });\n\n            const result = await response.json();\n\n            if (response.ok) {\n                setColors(result.colors);\n            } else {\n                console.error('Error fetching colors:', result.error);\n            }\n\n        } catch (error) {\n            console.error('Error fetching colors:', error);\n        }\n    };\n    \n\n\n\n\n\n\n\n    const copyToClipboard = (hex) => {\n        navigator.clipboard.writeText(hex).then(() => {\n            alert(`Copied ${hex} to clipboard`); \n        }).catch(err => {\n            console.error('Could not copy text: ', err);\n        });\n    };\n\n    const handleColorUpdate = (newColor, index) => {\n        let updatedColors = [...colors];\n        if (index !== -1) {\n            updatedColors[index] = {...updatedColors[index], hex: newColor};\n            setColors(updatedColors);\n            localStorage.setItem('colors', JSON.stringify(updatedColors));\n        }\n    };\n\n    const removeColor = async(indexToRemove) => {\n\n\n        const userData = JSON.parse(localStorage.getItem('userData'));\n\n        const user_id = userData.userId;\n        const token = userData.token;\n        const color = colors[indexToRemove];\n\n\n        const queryParams = new URLSearchParams({user_id, color: color.hex, token });\n        const endpoint = `/users/${user_id}/colors?${queryParams}`;\n\n\n\n        try {\n\n            const response = await apiRequest(endpoint, 'DELETE');\n\n            console.log('response:', response);\n\n            if (response) {\n                \n                console.log('Color removed:', color.hex);\n\n                const newColors = colors.filter((_, index) => index !== indexToRemove);\n                localStorage.setItem('colors', JSON.stringify(newColors));\n                setColors(newColors);\n             \n            }\n          } catch (error) {\n            console.error('Error adding color:', error);\n          }\n\n\n    };\n\n    const editColor = (color) => {\n        setEditingColor(color); // Store the hex value of the color being edited\n        setIsOpen(true); // Open the modal\n    };\n\n\n\n    return (\n        <div className=\"myColorsContainer\">\n            <h1>My Colors</h1>\n            <div className=\"colorsGrid\">\n                {colors.map((color, index) => (\n                    <div key={index} className=\"colorItem\">\n                        <div\n                            className=\"colorSquare\"\n                            style={{ backgroundColor: color.hex }}\n                            onClick={() => copyToClipboard(color.hex)}\n                        ></div>\n                        <div className=\"colorHex\">{color.hex}</div>\n\n                        <div className=\"editIcon\" onClick={() => editColor(color)}> </div>\n\n\n                        <EditMyColors\n                            isOpen={isOpen}\n                            onClose={() => setIsOpen(false)}\n                            initialColor={editingColor ? editingColor.hex : '#FFFFFF'} \n                            onColorUpdate={(newColor) => handleColorUpdate(newColor, colors.indexOf(editingColor))}\n                        />\n\n                        <div className=\"deleteIcon\" onClick={() => removeColor(index)}>\n                            &times;\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MyColors;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}