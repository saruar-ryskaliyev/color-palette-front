{"ast":null,"code":"const BASE_URL = 'http://localhost:8000'; // Define the base URL only once\n\nexport const apiRequest = async (endpoint, method, data, isJson = true) => {\n  const url = `${BASE_URL}${endpoint}`;\n  let headers = {};\n  headers['Accept'] = 'application/json';\n  let body;\n  if (method === 'DELETE') {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  // Set headers and body based on whether the request is JSON or form-urlencoded\n  if (isJson) {\n    headers['Content-Type'] = 'application/json';\n    body = JSON.stringify(data);\n  } else {\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    body = Object.keys(data).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key])).join('&');\n  }\n  const options = {\n    method: method,\n    headers: headers,\n    body: method !== 'GET' ? body : null\n  };\n  try {\n    const response = await fetch(url, options);\n\n    // Try to parse the response body as JSON\n    let jsonData;\n    try {\n      jsonData = await response.json();\n    } catch (error) {\n      if (response.ok) {\n        // If the response is okay, but the body isn't JSON, return an empty object or some other default value\n        return {};\n      } else {\n        // If the response is not okay, throw an error\n        throw new Error('Server responded with an error');\n      }\n    }\n\n    // Only throw an error if the response status code is not a success\n    if (response.ok) {\n      return jsonData;\n    } else {\n      throw new Error(jsonData.error || 'Server responded with an error');\n    }\n  } catch (error) {\n    // Log or handle the error as appropriate\n    console.error('Fetch error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","apiRequest","endpoint","method","data","isJson","url","headers","body","JSON","stringify","Object","keys","map","key","encodeURIComponent","join","options","response","fetch","jsonData","json","error","ok","Error","console"],"sources":["/Users/saruar/Desktop/color palette/color-palette/src/pages/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8000'; // Define the base URL only once\n\nexport const apiRequest = async (endpoint, method, data, isJson = true) => {\n    const url = `${BASE_URL}${endpoint}`;\n    let headers = {};\n    headers['Accept'] = 'application/json';\n    let body;\n\n    if (method === 'DELETE'){\n        headers['Content-Type'] = 'application/json';\n    }\n\n\n\n\n    // Set headers and body based on whether the request is JSON or form-urlencoded\n    if (isJson) {\n        headers['Content-Type'] = 'application/json';\n        body = JSON.stringify(data);\n    } else {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        body = Object.keys(data).map(\n            key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key])\n        ).join('&');\n    }\n\n    const options = {\n        method: method,\n        headers: headers,\n        body: method !== 'GET' ? body : null,\n    };\n\n    try {\n        const response = await fetch(url, options);\n\n        // Try to parse the response body as JSON\n        let jsonData;\n        try {\n            jsonData = await response.json();\n        } catch (error) {\n            if (response.ok) {\n                // If the response is okay, but the body isn't JSON, return an empty object or some other default value\n                return {};\n            } else {\n                // If the response is not okay, throw an error\n                throw new Error('Server responded with an error');\n            }\n        }\n\n        // Only throw an error if the response status code is not a success\n        if (response.ok) {\n            return jsonData;\n        } else {\n            throw new Error(jsonData.error || 'Server responded with an error');\n        }\n    } catch (error) {\n        // Log or handle the error as appropriate\n        console.error('Fetch error:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEC,MAAM,GAAG,IAAI,KAAK;EACvE,MAAMC,GAAG,GAAI,GAAEN,QAAS,GAAEE,QAAS,EAAC;EACpC,IAAIK,OAAO,GAAG,CAAC,CAAC;EAChBA,OAAO,CAAC,QAAQ,CAAC,GAAG,kBAAkB;EACtC,IAAIC,IAAI;EAER,IAAIL,MAAM,KAAK,QAAQ,EAAC;IACpBI,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;EAChD;;EAKA;EACA,IAAIF,MAAM,EAAE;IACRE,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IAC5CC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;EAC/B,CAAC,MAAM;IACHG,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC;IAC7DC,IAAI,GAAGG,MAAM,CAACC,IAAI,CAACR,IAAI,CAAC,CAACS,GAAG,CACxBC,GAAG,IAAIC,kBAAkB,CAACD,GAAG,CAAC,GAAG,GAAG,GAAGC,kBAAkB,CAACX,IAAI,CAACU,GAAG,CAAC,CACvE,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;EACf;EAEA,MAAMC,OAAO,GAAG;IACZd,MAAM,EAAEA,MAAM;IACdI,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAEL,MAAM,KAAK,KAAK,GAAGK,IAAI,GAAG;EACpC,CAAC;EAED,IAAI;IACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAEW,OAAO,CAAC;;IAE1C;IACA,IAAIG,QAAQ;IACZ,IAAI;MACAA,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,IAAIJ,QAAQ,CAACK,EAAE,EAAE;QACb;QACA,OAAO,CAAC,CAAC;MACb,CAAC,MAAM;QACH;QACA,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACrD;IACJ;;IAEA;IACA,IAAIN,QAAQ,CAACK,EAAE,EAAE;MACb,OAAOH,QAAQ;IACnB,CAAC,MAAM;MACH,MAAM,IAAII,KAAK,CAACJ,QAAQ,CAACE,KAAK,IAAI,gCAAgC,CAAC;IACvE;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZ;IACAG,OAAO,CAACH,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}